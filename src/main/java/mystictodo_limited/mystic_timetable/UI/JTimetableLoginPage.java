/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mystictodo_limited.mystic_timetable.UI;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import mystictodo_limited.mystic_timetable.db.*;
import mystictodo_limited.mystic_timetable.tools.validCheck;

/**
 *
 * @author Jamario_Downer
 */
public class JTimetableLoginPage extends javax.swing.JFrame {

    /**
     * Creates new form JTimetableLoginPage
     */
    public JTimetableLoginPage() {
        
        //Create instance of DbConnectionManager for logger
        logger = new DbConnectionManager(JTimetableLoginPage.class);
        logger.CreateLog("info", "Default Constructor Triggered.", null); //user logger method from DbConnectionManager to create logs.
        
        initComponents(); //default method from jTimetableLoginPage
        jPanelUserUISwitch(1); // Show list of users 
        jPanelUserControlsSwitch(1, "home"); // Add home usercontrols to frame

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jModeHeader = new javax.swing.JLabel();
        jPanelUserUI = new javax.swing.JPanel();
        jHome = new javax.swing.JPanel();
        jAddUser = new javax.swing.JPanel();
        jLabelUserName = new javax.swing.JLabel();
        jLabelEmail = new javax.swing.JLabel();
        jLabelPassword = new javax.swing.JLabel();
        jPFPasswordAddUser = new javax.swing.JPasswordField();
        jTGBShowPasswordAddUser = new javax.swing.JToggleButton();
        jTFUserNameAddUser = new javax.swing.JTextField();
        jBClearAllAddUser = new javax.swing.JButton();
        jTFEmailAddUser = new javax.swing.JTextField();
        jLabelErrorUserNameAddUser = new javax.swing.JLabel();
        jLabelErrorEmailAddUser = new javax.swing.JLabel();
        jLabelErrorPasswordAddUser = new javax.swing.JLabel();
        jLogin = new javax.swing.JPanel();
        jLabelEmailLogin = new javax.swing.JLabel();
        jLabelPasswordLogin = new javax.swing.JLabel();
        jTFEmailLogin = new javax.swing.JTextField();
        jPFPasswordLogin = new javax.swing.JPasswordField();
        jTGBShowPasswordLogin = new javax.swing.JToggleButton();
        jBClearAllLogin = new javax.swing.JButton();
        jPanelUserControls = new javax.swing.JPanel();
        jAppTitle1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jModeHeader.setFont(new java.awt.Font("Vampire Wars", 1, 24)); // NOI18N
        jModeHeader.setForeground(new java.awt.Color(0, 0, 0));
        jModeHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jModeHeader.setText("Jamario");
        jModeHeader.setToolTipText("");
        jModeHeader.setAlignmentX(0.5F);
        jModeHeader.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, new java.awt.Color(0, 51, 204)));
        jModeHeader.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jModeHeader.setMaximumSize(new java.awt.Dimension(500, 50));
        jModeHeader.setMinimumSize(new java.awt.Dimension(300, 40));
        jModeHeader.setPreferredSize(new java.awt.Dimension(503, 40));

        jPanelUserUI.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 1, 2, 1, new java.awt.Color(0, 0, 0)));
        jPanelUserUI.setAutoscrolls(true);
        jPanelUserUI.setMaximumSize(new java.awt.Dimension(500, 1000));
        jPanelUserUI.setOpaque(false);
        jPanelUserUI.setPreferredSize(new java.awt.Dimension(300, 300));

        jHome.setAutoscrolls(true);
        jHome.setEnabled(false);
        jHome.setMaximumSize(new java.awt.Dimension(500, 1000));
        jHome.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout jHomeLayout = new javax.swing.GroupLayout(jHome);
        jHome.setLayout(jHomeLayout);
        jHomeLayout.setHorizontalGroup(
            jHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 286, Short.MAX_VALUE)
        );
        jHomeLayout.setVerticalGroup(
            jHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );

        jAddUser.setEnabled(false);
        jAddUser.setMaximumSize(new java.awt.Dimension(500, 1000));
        jAddUser.setPreferredSize(new java.awt.Dimension(300, 300));

        jLabelUserName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelUserName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelUserName.setLabelFor(jTFUserNameAddUser);
        jLabelUserName.setText("User Name");

        jLabelEmail.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelEmail.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelEmail.setLabelFor(jTFEmailAddUser);
        jLabelEmail.setText("Email");

        jLabelPassword.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelPassword.setLabelFor(jPFPasswordAddUser);
        jLabelPassword.setText("Password");

        jPFPasswordAddUser.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jPFPasswordAddUser.setToolTipText("Enter Password");
        jPFPasswordAddUser.setMaximumSize(new java.awt.Dimension(1000, 50));
        jPFPasswordAddUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jPFPasswordAddUserKeyTyped(evt);
            }
        });

        jTGBShowPasswordAddUser.setText("Show");
        jTGBShowPasswordAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTGBShowPasswordAddUserActionPerformed(evt);
            }
        });

        jTFUserNameAddUser.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTFUserNameAddUser.setToolTipText("Enter User Name");
        jTFUserNameAddUser.setMaximumSize(new java.awt.Dimension(1000, 100));
        jTFUserNameAddUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFUserNameAddUserKeyTyped(evt);
            }
        });

        jBClearAllAddUser.setText("Clear All");
        jBClearAllAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBClearAllAddUserActionPerformed(evt);
            }
        });

        jTFEmailAddUser.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTFEmailAddUser.setToolTipText("Enter Email");
        jTFEmailAddUser.setMaximumSize(new java.awt.Dimension(1000, 100));
        jTFEmailAddUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFEmailAddUserKeyTyped(evt);
            }
        });

        jLabelErrorUserNameAddUser.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabelErrorUserNameAddUser.setForeground(new java.awt.Color(255, 0, 0));
        jLabelErrorUserNameAddUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelErrorUserNameAddUser.setText("*");

        jLabelErrorEmailAddUser.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabelErrorEmailAddUser.setForeground(new java.awt.Color(255, 0, 0));
        jLabelErrorEmailAddUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelErrorEmailAddUser.setText("*");

        jLabelErrorPasswordAddUser.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabelErrorPasswordAddUser.setForeground(new java.awt.Color(255, 0, 0));
        jLabelErrorPasswordAddUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelErrorPasswordAddUser.setText("*");

        javax.swing.GroupLayout jAddUserLayout = new javax.swing.GroupLayout(jAddUser);
        jAddUser.setLayout(jAddUserLayout);
        jAddUserLayout.setHorizontalGroup(
            jAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAddUserLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTFEmailAddUser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTFUserNameAddUser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jAddUserLayout.createSequentialGroup()
                        .addGroup(jAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jAddUserLayout.createSequentialGroup()
                                .addComponent(jLabelPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelErrorPasswordAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jAddUserLayout.createSequentialGroup()
                                .addComponent(jPFPasswordAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTGBShowPasswordAddUser)))
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jAddUserLayout.createSequentialGroup()
                        .addGroup(jAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jAddUserLayout.createSequentialGroup()
                                .addComponent(jLabelEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelErrorEmailAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jAddUserLayout.createSequentialGroup()
                                .addComponent(jLabelUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelErrorUserNameAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jAddUserLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBClearAllAddUser)
                .addGap(114, 114, 114))
        );
        jAddUserLayout.setVerticalGroup(
            jAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAddUserLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUserName)
                    .addComponent(jLabelErrorUserNameAddUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFUserNameAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEmail)
                    .addComponent(jLabelErrorEmailAddUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFEmailAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPassword)
                    .addComponent(jLabelErrorPasswordAddUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTGBShowPasswordAddUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPFPasswordAddUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addComponent(jBClearAllAddUser)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jLogin.setEnabled(false);
        jLogin.setMaximumSize(new java.awt.Dimension(500, 1000));
        jLogin.setPreferredSize(new java.awt.Dimension(300, 300));

        jLabelEmailLogin.setLabelFor(jTFEmailLogin);
        jLabelEmailLogin.setText(" Email");

        jLabelPasswordLogin.setLabelFor(jPFPasswordLogin);
        jLabelPasswordLogin.setText("Password");

        jTFEmailLogin.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTFEmailLogin.setToolTipText("Enter User Name");
        jTFEmailLogin.setMaximumSize(new java.awt.Dimension(1000, 100));

        jPFPasswordLogin.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jPFPasswordLogin.setMaximumSize(new java.awt.Dimension(1000, 50));

        jTGBShowPasswordLogin.setText("Show");
        jTGBShowPasswordLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTGBShowPasswordLoginActionPerformed(evt);
            }
        });

        jBClearAllLogin.setText("Clear All");
        jBClearAllLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBClearAllLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLoginLayout = new javax.swing.GroupLayout(jLogin);
        jLogin.setLayout(jLoginLayout);
        jLoginLayout.setHorizontalGroup(
            jLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoginLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelEmailLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabelPasswordLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jLoginLayout.createSequentialGroup()
                            .addGroup(jLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jBClearAllLogin)
                                .addComponent(jPFPasswordLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTGBShowPasswordLogin))
                        .addComponent(jTFEmailLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 22, Short.MAX_VALUE))
        );
        jLoginLayout.setVerticalGroup(
            jLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLoginLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabelEmailLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTFEmailLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabelPasswordLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPFPasswordLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTGBShowPasswordLogin))
                .addGap(42, 42, 42)
                .addComponent(jBClearAllLogin)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelUserUILayout = new javax.swing.GroupLayout(jPanelUserUI);
        jPanelUserUI.setLayout(jPanelUserUILayout);
        jPanelUserUILayout.setHorizontalGroup(
            jPanelUserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
            .addGroup(jPanelUserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelUserUILayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jHome, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
            .addGroup(jPanelUserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelUserUILayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 286, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanelUserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelUserUILayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanelUserUILayout.setVerticalGroup(
            jPanelUserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
            .addGroup(jPanelUserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelUserUILayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jHome, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanelUserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelUserUILayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jAddUser, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanelUserUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelUserUILayout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jHome.getAccessibleContext().setAccessibleName("");
        jAddUser.getAccessibleContext().setAccessibleName("");

        jPanelUserControls.setMaximumSize(new java.awt.Dimension(100, 1000));

        javax.swing.GroupLayout jPanelUserControlsLayout = new javax.swing.GroupLayout(jPanelUserControls);
        jPanelUserControls.setLayout(jPanelUserControlsLayout);
        jPanelUserControlsLayout.setHorizontalGroup(
            jPanelUserControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelUserControlsLayout.setVerticalGroup(
            jPanelUserControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 49, Short.MAX_VALUE)
        );

        jAppTitle1.setFont(new java.awt.Font("Vampire Wars", 1, 36)); // NOI18N
        jAppTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jAppTitle1.setText("Welcome to Mystic TimeTable");
        jAppTitle1.setToolTipText("");
        jAppTitle1.setAlignmentX(0.5F);
        jAppTitle1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jAppTitle1.setMaximumSize(new java.awt.Dimension(1003, 100));
        jAppTitle1.setMinimumSize(new java.awt.Dimension(503, 40));
        jAppTitle1.setPreferredSize(new java.awt.Dimension(503, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(419, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanelUserControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelUserUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jModeHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)))
                .addContainerGap(420, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addComponent(jAppTitle1, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
                    .addGap(16, 16, 16)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(jModeHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelUserUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelUserControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(61, 61, 61)
                    .addComponent(jAppTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(527, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTGBShowPasswordLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTGBShowPasswordLoginActionPerformed
        // Toggle to show the PasswordField Content 
        if(jTGBShowPasswordLogin.isSelected()){
            jPFPasswordLogin.setEchoChar((char) 0); //Show password
        }else{
            jPFPasswordLogin.setEchoChar('*'); //Hide password
        }   
    }//GEN-LAST:event_jTGBShowPasswordLoginActionPerformed

    private void jBClearAllLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBClearAllLoginActionPerformed
        //Clear All Content from Fields.
        jTFEmailLogin.setText("");
        jPFPasswordLogin.setText("");
    }//GEN-LAST:event_jBClearAllLoginActionPerformed

    private void jTGBShowPasswordAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTGBShowPasswordAddUserActionPerformed
        // Toggle to show the PasswordField Content 
        if(jTGBShowPasswordAddUser.isSelected()){
            jPFPasswordAddUser.setEchoChar((char) 0); //Show password
        }else{
            jPFPasswordAddUser.setEchoChar('.'); //Hide password
        }
    }//GEN-LAST:event_jTGBShowPasswordAddUserActionPerformed

    private void jBClearAllAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBClearAllAddUserActionPerformed
        //Clear All Content from Fields.
        jTFUserNameAddUser.setText("");
        jTFEmailAddUser.setText("");
        jPFPasswordAddUser.setText("");
        jLabelErrorUserNameAddUser.setVisible(false);
        jLabelErrorEmailAddUser.setVisible(false);
        jLabelErrorPasswordAddUser.setVisible(false);
        
    }//GEN-LAST:event_jBClearAllAddUserActionPerformed

    private void jTFUserNameAddUserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFUserNameAddUserKeyTyped
        jLabelErrorUserNameAddUser.setVisible(false); 
    }//GEN-LAST:event_jTFUserNameAddUserKeyTyped

    private void jTFEmailAddUserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFEmailAddUserKeyTyped
        jLabelErrorEmailAddUser.setVisible(false);
    }//GEN-LAST:event_jTFEmailAddUserKeyTyped

    private void jPFPasswordAddUserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPFPasswordAddUserKeyTyped
        jLabelErrorPasswordAddUser.setVisible(false);
    }//GEN-LAST:event_jPFPasswordAddUserKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTimetableLoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTimetableLoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTimetableLoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTimetableLoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JTimetableLoginPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jAddUser;
    private javax.swing.JLabel jAppTitle1;
    private javax.swing.JButton jBClearAllAddUser;
    private javax.swing.JButton jBClearAllLogin;
    private javax.swing.JPanel jHome;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelEmailLogin;
    private javax.swing.JLabel jLabelErrorEmailAddUser;
    private javax.swing.JLabel jLabelErrorPasswordAddUser;
    private javax.swing.JLabel jLabelErrorUserNameAddUser;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelPasswordLogin;
    private javax.swing.JLabel jLabelUserName;
    private javax.swing.JPanel jLogin;
    private javax.swing.JLabel jModeHeader;
    private javax.swing.JPasswordField jPFPasswordAddUser;
    private javax.swing.JPasswordField jPFPasswordLogin;
    private javax.swing.JPanel jPanelUserControls;
    private javax.swing.JPanel jPanelUserUI;
    private javax.swing.JTextField jTFEmailAddUser;
    private javax.swing.JTextField jTFEmailLogin;
    private javax.swing.JTextField jTFUserNameAddUser;
    private javax.swing.JToggleButton jTGBShowPasswordAddUser;
    private javax.swing.JToggleButton jTGBShowPasswordLogin;
    // End of variables declaration//GEN-END:variables

    
    //Feilds >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   
    private DbConnectionManager logger;
    private int passwordAttempts;
    
    //Methods >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   

    //Switch jPanelUserUI
    private void jPanelUserUISwitch(int mode){
        
        passwordAttempts = 0;

        //Disable all Ui element to prevent UI issues
        jHome.setVisible(false);  //Mode 1
        jAddUser.setVisible(false); //Mode 2
        jLogin.setVisible(false); //Mode 3
        
        switch(mode){
            case 1 :
                jModeHeader.setText("Users");
                jHome.setVisible(true);
                jHomeAddElements();
                break;
            case 2 :
                jModeHeader.setText("Add New User");
                jAddUser.setVisible(true);
                jLabelErrorUserNameAddUser.setVisible(false);
                jLabelErrorEmailAddUser.setVisible(false);
                jLabelErrorPasswordAddUser.setVisible(false);
                break;
            case 3 :
                jLogin.setVisible(true);
                break;
            default :
                logger.CreateLog("error", "UserUI not populated due to exception.", null);
                break;
        }//End switch
    }// End jPanelUserUISwitch
    
    // Add Users to jHome and there respected events
    private void jHomeAddElements() {
        logger.CreateLog("info", "Jlist show elements event triggered.", null);
        
        DbUsers users = new DbUsers();
        try {
            ArrayList<DbUsers> userList = users.GetAllEntries();  // get all users 
            //jPanelUserUI.removeAll(); // Remove any components from the UserUI 
            
            jHome.removeAll(); // Remove any components from the jHome 
            if (userList != null && !userList.isEmpty()) {
                
                int userCount = userList.size(); // Get number of users
                jHome.setLayout(new GridLayout(userCount, 1, 5, 10)); // Set the layout for the jHome
                //jPanelUserList.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 10)); // Horizontal gap = 20, Vertical gap = 10
                
                
                // ileterate through list of users
                for (DbUsers user : userList){
                    //Get info from DB
                    int userId = user.getUserId();
                    String username = user.getUserName(); //gets the user name from jHome
                   
                    //Add new panel to seperate buttons base on Column sizes, specific to a row
                    JPanel row = new JPanel();
                    row.setLayout(new GridBagLayout()); // Set the layout for the jHome
                    GridBagConstraints gbc = new GridBagConstraints(); //Set constraints for layout
                
                    //Set Preferred column sizes
                    Dimension col1Size = new Dimension(200, 25);
                    Dimension col2Size = new Dimension(60, 25);
                
                    // Set insets for gaps (top, left, bottom, right)
                    Insets insets = new Insets(0, 5, 0, 5); // 5 pixels gap on all sides

                    //Add Button1
                    gbc.gridx = 0;
                    gbc.gridy = 0;
                    gbc.insets = insets; // Set insets for gaps
                    JButton button1 = new JButton(username); //add new button1 instance of that user
                    button1.setBounds(10, 10, 200, 5);
                    button1.setPreferredSize(col1Size);
                    
                    // add ActionListener to the button
                    button1.addActionListener((ActionEvent e) -> {
                        loginPrompt(userId, username); //Trigger User prompt and stores the userId
                    });
                    row.add(button1, gbc); // Add button to jHome 
                    
                    //Add Button2
                    gbc.gridx = 1;
                    gbc.insets = insets; // Set insets for gaps
                    JButton button2 = new JButton("X"); //add new button2 instance of that user
                    button2.setBounds(10, 10, 50, 5);
                    button2.setBackground(Color.red);
                    button2.setForeground(Color.white);
                    button2.setPreferredSize(col2Size);
                    
                    // add ActionListener to the button
                    button2.addActionListener((ActionEvent e) -> {
                        try{
                            user.DeleteEntryById(userId);
                            //DbUsers eventUser = new DbUsers();
                            //eventUser.DeleteEntryById(userId);
                        }catch(SQLException ex){
                            logger.CreateLog("error", "Failed to delele User : " + username , ex);
                        }
                        System.out.println(userId);
                        jPanelUserUISwitch(1); //Switch Mode to home
                        jPanelUserControlsSwitch(1, "home");// switch UserControls to home
                    });
                    row.add(button2, gbc); // Add button to row 
                    
                   jHome.add(row);
                }
                jPanelUserUI.add(jHome);// Add home Ui to UserUI
                      
            }else{
                
                logger.CreateLog("info", "The user list is empty or null", null);
            }
            
        } catch (SQLException ex) {
            logger.CreateLog("error", "UserUI not populated due to SQLException. ", ex);
        }
    }// End jHomeAddElements 
    
    
    // Show User and prompt to enter credentials
    private void loginPrompt(int userId, String username){
        logger.CreateLog("info", "LoginPrompt Method triggered.", null);
     
        //Login in automatically if its the guest user without a password
        if(userId == 1){
           //Switch to the Guest UserAccount MainPage without password
            signSuccess(userId, username);
        }else{
           jPanelUserUISwitch(3); //Switch Mode to Login
           jPanelUserControlsSwitch(userId, "login"); // switch UserControls to login
           jModeHeader.setText(username); //Change ModeHeader to User Name
           
        }
    }//End LoginPrompt page
    
    
    // Sign into user only if credentials are correct 
    private void signSuccess(int UserId, String username){
    //Switch to the Guest UserAccount
     this.setVisible(false); //hide current Frame
           
     //create and show second frame
     JTimetableMain mainPanel = new JTimetableMain(UserId, username);
     mainPanel.setVisible(true);
    
    }//End signSuccess
    
            
    
    //Switch jPandelUserControls buttons base on Events
    private void jPanelUserControlsSwitch(int userId, String mode){
        logger.CreateLog("info", "jPanelUserControls show elements event triggered.", null);
        
        //Create a list of buttons
        // Create Add New Mode button
        JButton buttonNewUser = new JButton("Add New User"); 
        buttonNewUser.setBounds(10, 20, 40, 20);
        buttonNewUser.addActionListener((ActionEvent e) -> {
            jPanelUserUISwitch(2);//Switch to UserList to addUser mode 
            jPanelUserControlsSwitch(1, "addUser"); //switch UserControls to addUser mode
        });
        
        // Create Cancel button
        JButton buttonCancel = new JButton("Cancel"); 
        buttonCancel.setBounds(10, 20, 40, 20);
        buttonCancel.addActionListener((ActionEvent e) -> {
            jPanelUserUISwitch(1);//Switch to UserList to home mode 
            jPanelUserControlsSwitch(1, "home"); //switch UserControls to home mode
        });
        
        // Create Login button
        JButton buttonLogin = new JButton("Login"); 
        buttonLogin.setBounds(10, 20, 40, 20);
        buttonLogin.addActionListener((ActionEvent e) -> {
            //Switch to timetable ui base on a userId
            if (userId != 1){
                loginVerification(userId);
            }
        });
        
        // Create addUser button
        JButton buttonaddUser = new JButton("Add"); 
        buttonaddUser.setBounds(10, 20, 40, 20);
        buttonaddUser.addActionListener((ActionEvent e) -> {
            //add new user to database 
            addNewUser();
        });
        
        //Determines what button would appear on the login page base on a event triggered(mode)
        jPanelUserControls.removeAll(); // Remove all existing elements from UserControls if any
        switch(mode){
            case "home" :
                    jPanelUserControls.setLayout(new GridLayout(1,1,100, 10 )); //set only 1 buttons for the user controls
                    jPanelUserControls.add(buttonNewUser);
                    //jPanelUserControlsAddElements(1, buttonNewUser, null);
                    break;
            case "login" :
                    jPanelUserControls.setLayout(new GridLayout(1,2,100, 10 )); //set only 2 buttons for the user controls
                    jPanelUserControls.add(buttonLogin);
                    jPanelUserControls.add(buttonCancel);
                
                    //jPanelUserControlsAddElements(2, buttonLogin, buttonCancel);
                    break;
            case "addUser" :
                    jPanelUserControls.setLayout(new GridLayout(1,2,100, 10 )); //set only 2 buttons for the user controls
                    jPanelUserControls.add(buttonaddUser);
                    jPanelUserControls.add(buttonCancel);
                
                    //jPanelUserControlsAddElements(2, buttonaddUser, buttonCancel);
                    break;
            default:
                    logger.CreateLog("fatal", "Invalid selection for UserControl element. UserControls not populated.", null);
                 break;
 
        }// End switch 
    }//End jPanelUserControlsSwitch

    private void addNewUser() {
        logger.CreateLog("info", "Create new user Method triggered.", null);
        boolean valid = true;
        jLabelErrorUserNameAddUser.setVisible(false);
        jLabelErrorEmailAddUser.setVisible(false);
        jLabelErrorPasswordAddUser.setVisible(false);
  
        //verify that fields are not empty and valid
        String errorMessage = "";
        
        //Test UserName
        boolean testUserName = validCheck.checkTextField(jTFUserNameAddUser);
        if(!testUserName){
            valid = false;
            jLabelErrorUserNameAddUser.setVisible(true);
            errorMessage += "UserName : User Name Invalid or Empty!";
        }
        
       //Test Email
        boolean testEmail = validCheck.checkEmailField(jTFEmailAddUser);
        if(!testEmail) {
            valid = false;
            jLabelErrorEmailAddUser.setVisible(true);
            errorMessage += "\nEmail : Email Invalid format or Empty!";
        }
        
        //Test Password
        boolean testPassword = validCheck.checkPasswordField(jPFPasswordAddUser);
        if(!testPassword){
            valid = false;
            jLabelErrorPasswordAddUser.setVisible(true);
            errorMessage += "\nPassword : Password Invalid or Empty!";
        }
        
        
//        if(jTFUserNameAddUser == null || jTFUserNameAddUser.getText().isBlank()){
//            valid = false;
//            
//            jTFUserNameAddUser.grabFocus();
//            jLabelErrorUserNameAddUser.setVisible(true);
//            errorMessage += "UserName : User Name Invalid or Empty!";
//        }
  
//        if(jTFEmailAddUser == null || jTFEmailAddUser.getText().isBlank()){
//            valid = false;
//            
//            jTFEmailAddUser.grabFocus();
//            jLabelErrorEmailAddUser.setVisible(true);
//            errorMessage += "\nEmail : Email Invalid format or Empty!";
//        }else{
//            String emailRegex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";
//            Pattern pattern = Pattern.compile(emailRegex);
//            Matcher matcher = pattern.matcher(jTFEmailAddUser.getText());
//            if(!matcher.matches()){
//                valid = false;
//                
//                jTFEmailAddUser.grabFocus();
//                jLabelErrorEmailAddUser.setVisible(true);
//                errorMessage += "\nEmail : Email format Invalid!";
//            }
//        }
        
//        if(jPFPasswordAddUser == null){
//           valid = false;
//           
//           jPFPasswordAddUser.grabFocus();
//           jLabelErrorPasswordAddUser.setVisible(true);
//           errorMessage += "\nPassword : Password null!";
//        }else{
//            char[] passwordChar = jPFPasswordAddUser.getPassword();
//            String password = new String(passwordChar);
//            
//            if(password.isBlank()){
//                valid = false;
//                
//                jPFPasswordAddUser.grabFocus();
//                jLabelErrorPasswordAddUser.setVisible(true);
//                errorMessage += "\nPassword : Password Invalid or Empty!";
//            } 
//        }
        
            
           
        //if all condition or valid, save the user other a error prompt is offered
        if(valid){
            DbUsers user = new DbUsers();
            
            String userName = jTFUserNameAddUser.getText();
            String email = jTFEmailAddUser.getText(); 
            char[] passwordChar = jPFPasswordAddUser.getPassword();
            String password = new String(passwordChar);       

            try{
                
                boolean inserted = user.InsertEntry(userName, email, password);  // Add user to the database and also further test if it exist
                if(inserted){
                    JOptionPane.showMessageDialog(jPanelUserUI, "New User Added!", "information", JOptionPane.INFORMATION_MESSAGE );
                    jPanelUserUISwitch(1);//Switch to UserList to home mode 
                    jPanelUserControlsSwitch(1, "home"); //switch UserControls to home mode
                    
                    //Clear input
                    jTFUserNameAddUser.setText("");
                    jTFEmailAddUser.setText("");
                    jPFPasswordAddUser.setText("");
                }else{
                    JOptionPane.showMessageDialog(jTFUserNameAddUser, "Username or Email already exist. Please try again!", "warning", JOptionPane.WARNING_MESSAGE );
                }

            }catch(SQLException e){
                logger.CreateLog("error", "Failed to connect or add new user. ", e);
            }
        }else{
            //Display error
            JOptionPane.showMessageDialog(jTFUserNameAddUser, errorMessage, "warning", JOptionPane.WARNING_MESSAGE );
            logger.CreateLog("error", "User not saved due to invalid input. ", null);
        }
                
    }//End addNewUser
 

    //Verify that credentials are valid before signing.
    private boolean loginVerification(int userId) {
        logger.CreateLog("info", "Sign into user Method triggered.", null);
        boolean valid = true;
        boolean confirmedLogin = false;
        
        //verify that fields are not empty and valid
        //Test UserName or email and password
        boolean testEmail = validCheck.checkEmailField(jTFEmailLogin);
        boolean testPassword = validCheck.checkPasswordField(jPFPasswordLogin);
        if(!testEmail || !testPassword){
            valid = false;
        }
        
        try{
            //if all condition or valid, save the user other a error prompt is offered
            if(valid){
                //Create instance of the required tables
                DbUsers userDB = new DbUsers();
                DbLoginInfo loginInfo = new DbLoginInfo();
                
                //Initial required varilables 
                String userName = "";
            
                String email = jTFEmailLogin.getText();
                char[] passwordChar = jPFPasswordLogin.getPassword();
                String password = new String(passwordChar);       

                //get user information for validation
                var userDetails = userDB.GetEntrybyId(userId);
                
                
                //validate if the Email and password is correct
                if(userDetails.getEmailAddress().equals(email) && userDetails.getPassword().equals(password)){
                    confirmedLogin = true;
                }
                
                // Attempted sign
                if(confirmedLogin){
                    
                    JOptionPane.showMessageDialog(jPanelUserUI, "Login Successful!", "information", JOptionPane.INFORMATION_MESSAGE );
                    signSuccess(userId, userName); //Switch to UserList to Main page
                    
                    //Clear input
                    jTFEmailLogin.setText("");
                    jPFPasswordLogin.setText("");
                }else{
                    JOptionPane.showMessageDialog(jTFUserNameAddUser, "Login Failed. Email or Password incorrect!", "warning", JOptionPane.WARNING_MESSAGE );
                   
                }
                
                //Note Login Info for both attempt types
                boolean inserted = loginInfo.InsertEntry(userId, confirmedLogin, 0, 0);
                if(inserted){
                    logger.CreateLog("error", "Login Info updated. ", null);
                }else{
                    logger.CreateLog("error", "Failed to insert LoginInfo. ", null);
                }
                
            }else{
                //Display error
                JOptionPane.showMessageDialog(jTFEmailLogin, "Field : Invalid or Empty!", "warning", JOptionPane.WARNING_MESSAGE );
                logger.CreateLog("error", "User Login Failed due to invalid or empty input. ", null);
            }
        
        }catch(SQLException e){
                logger.CreateLog("error", "Failed to connect. User Login Failed due to error. ", e);
        }

        return confirmedLogin;
    }// End loginVerification
    

    
}// End Class
