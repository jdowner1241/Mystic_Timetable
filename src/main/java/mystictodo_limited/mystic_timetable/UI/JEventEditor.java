/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mystictodo_limited.mystic_timetable.UI;

import java.awt.Color;
import java.awt.Point;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;

import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import static mystictodo_limited.mystic_timetable.UI.JTimetableImportExportTool.logger;
import mystictodo_limited.mystic_timetable.db.DbConnectionManager;
import mystictodo_limited.mystic_timetable.hibernate.*;
import mystictodo_limited.mystic_timetable.tools.validCheck;

/**
 *
 * @author Jamario_Downer
 */
public class JEventEditor extends javax.swing.JFrame {

    /**
     * Creates new form JEventEditor
     */
    //Constructor >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   
    public JEventEditor() {
        logger = new DbConnectionManager(JEventEditor.class);
        logger.CreateLog("info", "Default Constructor Triggered.", null);
        initComponents();
        
    }


    public JEventEditor(int timetableId, int folderPerUserId, JTimetableMain mainWindow) {
        this();
        this.activeUserAndFolderId = folderPerUserId;
        this.activeTimetableId = timetableId;
        this.mainWindow = mainWindow;
        initializeEditorComp();
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorNotificationRadio = new javax.swing.ButtonGroup();
        EventColorSelectorDialog = new javax.swing.JDialog();
        EventColorSelector = new javax.swing.JColorChooser();
        jPanel9 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        editorJBDelete = new javax.swing.JButton();
        editorJBEdit = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        editorJLHeader = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        editorJLRepeatEvent = new javax.swing.JLabel();
        editorJCBRepeatEvent = new javax.swing.JComboBox<>();
        editorJLRepeatAmount = new javax.swing.JLabel();
        editorJCBRepeatAmount = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        editorJLStartTime = new javax.swing.JLabel();
        editorJSStartTime = new javax.swing.JSpinner();
        editorJLEndTime = new javax.swing.JLabel();
        editorJSEndTime = new javax.swing.JSpinner();
        editorJSStartTimeDBox = new javax.swing.JButton();
        editorJSEndTimeDBox = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        editorJLNotification = new javax.swing.JLabel();
        editorJRBNotificationOn = new javax.swing.JRadioButton();
        editorJRBNotificationOff = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        editorJLName = new javax.swing.JLabel();
        editorJLCategory = new javax.swing.JLabel();
        editorJLDay = new javax.swing.JLabel();
        editorJTFName = new javax.swing.JTextField();
        editorJCBCategory = new javax.swing.JComboBox<>();
        editorJCBDay = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        editorTbSetColor = new javax.swing.JToggleButton();
        editorTBColor = new javax.swing.JTextField();
        editorJLColor = new javax.swing.JLabel();
        editorTBColorStr = new javax.swing.JTextField();

        EventColorSelectorDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        EventColorSelectorDialog.setMinimumSize(new java.awt.Dimension(640, 326));
        EventColorSelectorDialog.setUndecorated(true);
        EventColorSelectorDialog.setType(java.awt.Window.Type.POPUP);

        EventColorSelector.setMaximumSize(new java.awt.Dimension(640, 326));
        EventColorSelector.setName(""); // NOI18N

        javax.swing.GroupLayout EventColorSelectorDialogLayout = new javax.swing.GroupLayout(EventColorSelectorDialog.getContentPane());
        EventColorSelectorDialog.getContentPane().setLayout(EventColorSelectorDialogLayout);
        EventColorSelectorDialogLayout.setHorizontalGroup(
            EventColorSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
            .addGroup(EventColorSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(EventColorSelectorDialogLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(EventColorSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        EventColorSelectorDialogLayout.setVerticalGroup(
            EventColorSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
            .addGroup(EventColorSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(EventColorSelectorDialogLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(EventColorSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mystic Timetable");
        setBackground(new java.awt.Color(51, 153, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel9.setBackground(new java.awt.Color(51, 153, 255));

        jPanel6.setBackground(new java.awt.Color(51, 153, 255));

        editorJBDelete.setBackground(new java.awt.Color(255, 102, 102));
        editorJBDelete.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJBDelete.setText("Delete");
        editorJBDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorJBDeleteActionPerformed(evt);
            }
        });

        editorJBEdit.setBackground(new java.awt.Color(0, 153, 51));
        editorJBEdit.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJBEdit.setText("Edit");
        editorJBEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorJBEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editorJBEdit)
                .addGap(18, 18, 18)
                .addComponent(editorJBDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editorJBEdit)
                    .addComponent(editorJBDelete))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(51, 153, 255));

        editorJLHeader.setFont(new java.awt.Font("Vampire Wars", 1, 18)); // NOI18N
        editorJLHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editorJLHeader.setText("Event Editor");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editorJLHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(editorJLHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel8.setBackground(new java.awt.Color(154, 189, 213));

        jPanel2.setBackground(new java.awt.Color(154, 189, 213));
        jPanel2.setLayout(new java.awt.GridLayout(4, 1, 20, 20));

        editorJLRepeatEvent.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJLRepeatEvent.setForeground(new java.awt.Color(0, 0, 0));
        editorJLRepeatEvent.setText("Repeat Event");
        editorJLRepeatEvent.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJLRepeatEvent.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJLRepeatEvent.setPreferredSize(new java.awt.Dimension(160, 25));
        jPanel2.add(editorJLRepeatEvent);

        editorJCBRepeatEvent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Once", "Daily", "Weekly", "Monthly" }));
        editorJCBRepeatEvent.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJCBRepeatEvent.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJCBRepeatEvent.setPreferredSize(new java.awt.Dimension(160, 25));
        editorJCBRepeatEvent.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                editorJCBRepeatEventPropertyChange(evt);
            }
        });
        jPanel2.add(editorJCBRepeatEvent);

        editorJLRepeatAmount.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJLRepeatAmount.setForeground(new java.awt.Color(0, 0, 0));
        editorJLRepeatAmount.setText("How Often");
        editorJLRepeatAmount.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJLRepeatAmount.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJLRepeatAmount.setPreferredSize(new java.awt.Dimension(160, 25));
        jPanel2.add(editorJLRepeatAmount);

        editorJCBRepeatAmount.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJCBRepeatAmount.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJCBRepeatAmount.setPreferredSize(new java.awt.Dimension(160, 25));
        jPanel2.add(editorJCBRepeatAmount);

        jPanel3.setBackground(new java.awt.Color(154, 189, 213));

        editorJLStartTime.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJLStartTime.setForeground(new java.awt.Color(0, 0, 0));
        editorJLStartTime.setText("Start Time");
        editorJLStartTime.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJLStartTime.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJLStartTime.setPreferredSize(new java.awt.Dimension(160, 25));

        editorJSStartTime.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJSStartTime.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJSStartTime.setPreferredSize(new java.awt.Dimension(160, 25));

        editorJLEndTime.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJLEndTime.setForeground(new java.awt.Color(0, 0, 0));
        editorJLEndTime.setText("End Time");
        editorJLEndTime.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJLEndTime.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJLEndTime.setPreferredSize(new java.awt.Dimension(160, 25));

        editorJSEndTime.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJSEndTime.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJSEndTime.setPreferredSize(new java.awt.Dimension(160, 25));

        editorJSStartTimeDBox.setBackground(new java.awt.Color(153, 186, 204));
        editorJSStartTimeDBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/Icons/down.png"))); // NOI18N
        editorJSStartTimeDBox.setAlignmentX(0.5F);
        editorJSStartTimeDBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editorJSStartTimeDBox.setInheritsPopupMenu(true);
        editorJSStartTimeDBox.setMaximumSize(new java.awt.Dimension(40, 40));
        editorJSStartTimeDBox.setMinimumSize(new java.awt.Dimension(40, 40));
        editorJSStartTimeDBox.setPreferredSize(new java.awt.Dimension(40, 40));

        editorJSEndTimeDBox.setBackground(new java.awt.Color(153, 186, 204));
        editorJSEndTimeDBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/Icons/down.png"))); // NOI18N
        editorJSEndTimeDBox.setAlignmentX(0.5F);
        editorJSEndTimeDBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editorJSEndTimeDBox.setInheritsPopupMenu(true);
        editorJSEndTimeDBox.setMaximumSize(new java.awt.Dimension(40, 40));
        editorJSEndTimeDBox.setMinimumSize(new java.awt.Dimension(40, 40));
        editorJSEndTimeDBox.setPreferredSize(new java.awt.Dimension(40, 40));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editorJLStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(editorJLEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(editorJSStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editorJSStartTimeDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(editorJSEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editorJSEndTimeDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(editorJLStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editorJSStartTime, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(editorJSStartTimeDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(editorJLEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editorJSEndTime, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(editorJSEndTimeDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        jPanel4.setBackground(new java.awt.Color(154, 189, 213));

        editorJLNotification.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJLNotification.setForeground(new java.awt.Color(0, 0, 0));
        editorJLNotification.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editorJLNotification.setText("Enable Notification");
        editorJLNotification.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJLNotification.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJLNotification.setPreferredSize(new java.awt.Dimension(160, 25));

        editorNotificationRadio.add(editorJRBNotificationOn);
        editorJRBNotificationOn.setForeground(new java.awt.Color(0, 0, 0));
        editorJRBNotificationOn.setText("Yes");

        editorNotificationRadio.add(editorJRBNotificationOff);
        editorJRBNotificationOff.setForeground(new java.awt.Color(0, 0, 0));
        editorJRBNotificationOff.setText("No");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorJRBNotificationOff, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editorJRBNotificationOn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addComponent(editorJLNotification, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorJLNotification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editorJRBNotificationOff)
                    .addComponent(editorJRBNotificationOn))
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(154, 189, 213));
        jPanel1.setLayout(new java.awt.GridLayout(2, 3, 20, 20));

        editorJLName.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJLName.setForeground(new java.awt.Color(0, 0, 0));
        editorJLName.setText("Name");
        editorJLName.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJLName.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJLName.setPreferredSize(new java.awt.Dimension(160, 25));
        jPanel1.add(editorJLName);

        editorJLCategory.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJLCategory.setForeground(new java.awt.Color(0, 0, 0));
        editorJLCategory.setText("Category");
        editorJLCategory.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJLCategory.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJLCategory.setPreferredSize(new java.awt.Dimension(160, 25));
        jPanel1.add(editorJLCategory);

        editorJLDay.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJLDay.setForeground(new java.awt.Color(0, 0, 0));
        editorJLDay.setText("Day");
        editorJLDay.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJLDay.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJLDay.setPreferredSize(new java.awt.Dimension(160, 25));
        jPanel1.add(editorJLDay);

        editorJTFName.setToolTipText("Event Name");
        editorJTFName.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJTFName.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJTFName.setPreferredSize(new java.awt.Dimension(160, 25));
        jPanel1.add(editorJTFName);

        editorJCBCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        editorJCBCategory.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJCBCategory.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJCBCategory.setPreferredSize(new java.awt.Dimension(160, 25));
        jPanel1.add(editorJCBCategory);

        editorJCBDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        editorJCBDay.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJCBDay.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJCBDay.setPreferredSize(new java.awt.Dimension(160, 25));
        jPanel1.add(editorJCBDay);

        jPanel5.setBackground(new java.awt.Color(154, 189, 213));

        editorTbSetColor.setText("Set Color");
        editorTbSetColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorTbSetColorActionPerformed(evt);
            }
        });

        editorTBColor.setEditable(false);
        editorTBColor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editorTBColor.setToolTipText("");
        editorTBColor.setAutoscrolls(false);
        editorTBColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorTBColorActionPerformed(evt);
            }
        });

        editorJLColor.setFont(new java.awt.Font("Vampire Wars", 0, 12)); // NOI18N
        editorJLColor.setForeground(new java.awt.Color(0, 0, 0));
        editorJLColor.setText("Color");
        editorJLColor.setMaximumSize(new java.awt.Dimension(170, 25));
        editorJLColor.setMinimumSize(new java.awt.Dimension(75, 25));
        editorJLColor.setPreferredSize(new java.awt.Dimension(160, 25));

        editorTBColorStr.setEditable(false);
        editorTBColorStr.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editorTBColorStr.setToolTipText("");
        editorTBColorStr.setAutoscrolls(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editorJLColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(editorTBColor, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editorTbSetColor))
                    .addComponent(editorTBColorStr)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorJLColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(editorTBColorStr, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editorTBColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editorTbSetColor))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editorJCBRepeatEventPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_editorJCBRepeatEventPropertyChange

    }//GEN-LAST:event_editorJCBRepeatEventPropertyChange

    private void editorTbSetColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorTbSetColorActionPerformed
        if(editorTbSetColor.isSelected()){
            EventColorSelectorDialog.setVisible(true);
            //EventColorSelectorDialog.setSize(600, 200);
            Point location = mainWindow.getLocationRelativeToScreen(editorTBColor);
            location.y += editorTBColor.getHeight(); // adjust to below the button
            EventColorSelectorDialog.setLocation(location);

        }else{
            EventColorSelectorDialog.setVisible(false);
        }
    }//GEN-LAST:event_editorTbSetColorActionPerformed

    private void editorTBColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorTBColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editorTBColorActionPerformed

    private void editorJBEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorJBEditActionPerformed
        editEvent();
    }//GEN-LAST:event_editorJBEditActionPerformed

    private void editorJBDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorJBDeleteActionPerformed
        deleteEvent();
    }//GEN-LAST:event_editorJBDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JEventEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JEventEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JEventEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JEventEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JEventEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser EventColorSelector;
    private javax.swing.JDialog EventColorSelectorDialog;
    private javax.swing.JButton editorJBDelete;
    private javax.swing.JButton editorJBEdit;
    private javax.swing.JComboBox<String> editorJCBCategory;
    private javax.swing.JComboBox<String> editorJCBDay;
    private javax.swing.JComboBox<String> editorJCBRepeatAmount;
    private javax.swing.JComboBox<String> editorJCBRepeatEvent;
    private javax.swing.JLabel editorJLCategory;
    private javax.swing.JLabel editorJLColor;
    private javax.swing.JLabel editorJLDay;
    private javax.swing.JLabel editorJLEndTime;
    private javax.swing.JLabel editorJLHeader;
    private javax.swing.JLabel editorJLName;
    private javax.swing.JLabel editorJLNotification;
    private javax.swing.JLabel editorJLRepeatAmount;
    private javax.swing.JLabel editorJLRepeatEvent;
    private javax.swing.JLabel editorJLStartTime;
    private javax.swing.JRadioButton editorJRBNotificationOff;
    private javax.swing.JRadioButton editorJRBNotificationOn;
    private javax.swing.JSpinner editorJSEndTime;
    private javax.swing.JButton editorJSEndTimeDBox;
    private javax.swing.JSpinner editorJSStartTime;
    private javax.swing.JButton editorJSStartTimeDBox;
    private javax.swing.JTextField editorJTFName;
    private javax.swing.ButtonGroup editorNotificationRadio;
    private javax.swing.JTextField editorTBColor;
    private javax.swing.JTextField editorTBColorStr;
    private javax.swing.JToggleButton editorTbSetColor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    // End of variables declaration//GEN-END:variables


    //Feilds >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private int activeUserAndFolderId;
    private int activeTimetableId;
    private DbConnectionManager logger;
    private JTimetableMain mainWindow;
    HFolderPerUser folderPerUserInfo;
    HTimetable timetableInfo;
    
    //Getters/Setters >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   
    
    public int getActiveUserAndFolderId() {
        return activeUserAndFolderId;
    }
    public void setActiveUserAndFolderId(int activeUserAndFolderId) {
        this.activeUserAndFolderId = activeUserAndFolderId;
    }
    public int getActiveTimetableId() {
        return activeTimetableId;
    }
    public void setActiveTimetableId(int activeTimetableId) {
        this.activeTimetableId = activeTimetableId;
    }

    public HFolderPerUser getFolderPerUserInfo() {
        return folderPerUserInfo;
    }
    public void setFolderPerUserInfo(HFolderPerUser folderPerUserInfo) {
        this.folderPerUserInfo = folderPerUserInfo;
    }
    
    //Methods >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   

    private void setupColorPickerListener(){
        // Add action listener to the color picker button where once a color is selected, it will set the color to the text field
        EventColorSelector.getSelectionModel().addChangeListener(e -> {
            Color selectedColor = EventColorSelector.getColor();
            editorTBColor.setBackground(selectedColor);
            String colorStr = String.format("RGB(%d, %d, %d)", selectedColor.getRed(), selectedColor.getGreen(), selectedColor.getBlue());
            editorTBColorStr.setText(colorStr);
        });
    
    }

    private void setupRepeatEventListener() {
        editorJCBRepeatEvent.addActionListener(evt -> {
            // populate the frequency amount based on the eventFrequency
            String eventFrequency = editorJCBRepeatEvent.getSelectedItem().toString();

            List<String> eventFrequencyAmount = new ArrayList<>();
            switch (eventFrequency) {
                case "Once":
                    editorJCBRepeatAmount.setEnabled(false);
                    break;
                case "Daily":
                    editorJCBRepeatAmount.setEnabled(true);
                    eventFrequencyAmount.add("1 : EveryDay");
                    eventFrequencyAmount.add("2 : EveryOtherDay");
                    eventFrequencyAmount.add("3 : EveryThirdDay");
                    break;
                case "Weekly":
                    editorJCBRepeatAmount.setEnabled(true);
                    eventFrequencyAmount.add("1 : EveryWeek");
                    eventFrequencyAmount.add("2 : EveryOtherWeek");
                    eventFrequencyAmount.add("3 : EveryThirdWeek");
                    break;
                case "Monthly":
                    editorJCBRepeatAmount.setEnabled(true);
                    eventFrequencyAmount.add("1 : EveryMonth");
                    eventFrequencyAmount.add("2 : EveryOtherMonth");
                    eventFrequencyAmount.add("3 : EveryThirdMonth");
                    eventFrequencyAmount.add("4 : EveryFourthMonth");
                    break;
                default:
                    eventFrequencyAmount.add("NotSet");
                    break;
            }
            // Populate the frequency amount combo box
            editorJCBRepeatAmount.removeAllItems();
            for (String frequency : eventFrequencyAmount) {
                editorJCBRepeatAmount.addItem(frequency);
            }
        });
    }
    
    private boolean eventValidCheck (){
        boolean isValid = true;
        if (!validCheck.checkTextField(editorJTFName)){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Name is required");
        }

        //Check if category is selected
        if (editorJCBCategory.getSelectedItem() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Category is required");
        }

        //Check if day is selected
        if (editorJCBDay.getSelectedItem() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Day is required");
        }

        //check frequency
        editorJCBRepeatEvent.getSelectedItem();
        if (editorJCBRepeatEvent.getSelectedItem() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Frequency is required");
        }
        
        //check frequency amount
        if (editorJCBRepeatAmount.getSelectedItem() == null && !editorJCBRepeatEvent.getSelectedItem().toString().equals("Once")){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Frequency Amount is required");
        }

        //check start time
        if (editorJSStartTime.getValue() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Start Time is required");
        }

        //check end time
        if (editorJSEndTime.getValue() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event End Time is required");
        }

        // check that start time is before end time
        Date startTime = (Date) editorJSStartTime.getValue();
        Date endTime = (Date) editorJSEndTime.getValue();     
        if (startTime != null && endTime != null) {
            if (startTime.after(endTime)) {
                isValid = false;
                JOptionPane.showMessageDialog(this, "Start time must be before end time");
            } else if (startTime.equals(endTime)) {
                isValid = false;
                JOptionPane.showMessageDialog(this, "Start time and end time cannot be the same");
            }
        }

        // check that of of NotificationRadio is selected 
        if (editorNotificationRadio.getSelection() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Notification is required");
        }

        return isValid;
    }
    
    private void editEvent() {
        
        boolean isValid = true;
      
        //Check if all fields are valid
        isValid = eventValidCheck();

        try {
            if (isValid) {
                //Prompt the user for confirmation
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to update this event?", "Update Event", JOptionPane.YES_NO_OPTION);
                if (confirm != JOptionPane.YES_OPTION) {
                    JOptionPane.showMessageDialog(this, "Event update cancelled.");
                    return; // user chose not to update
                }

                //Get values from UI
                String eventName = editorJTFName.getText();
                String eventCategory = editorJCBCategory.getSelectedItem().toString();
                int eventDayIndex = editorJCBDay.getSelectedIndex() + 1;
                int eventFrequencyType = editorJCBRepeatEvent.getSelectedIndex();
                int eventFrequencyAmountIndex = 0;
                if(eventFrequencyType != 0 ) {
                    eventFrequencyAmountIndex = editorJCBRepeatAmount.getSelectedIndex() + 1;
                } 
                
                Color color = EventColorSelector.getColor();
                String colorStr = color.toString();
                //get the active week index
                int weekIndex = mainWindow.getWeekIndex(LocalDate.now());
                // Removed unused variable monthIndex
                int yearIndex = LocalDate.now().getYear();
                LocalDate day = mainWindow.getFirstDayOfWeek(weekIndex, yearIndex).plusDays(eventDayIndex - 1);

                Date startTime = (Date) editorJSStartTime.getValue();
                //Correct the startTime
                LocalDateTime startDateTime = startTime.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                int startHour = startDateTime.getHour();
                int startMinute = startDateTime.getMinute();
                int startSecond = startDateTime.getSecond();
                LocalDateTime newStartDateTime = LocalDateTime.of(day.getYear(), day.getMonthValue(), day.getDayOfMonth(), startHour, startMinute, startSecond);
                startTime = Date.from(newStartDateTime.atZone(ZoneId.systemDefault()).toInstant()); 
            

                Date endTime = (Date) editorJSEndTime.getValue();
                 //Correct the endTime
                LocalDateTime endDateTime = endTime.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                int endHour = endDateTime.getHour();
                int endMinute = endDateTime.getMinute();
                int endSecond = endDateTime.getSecond();
                LocalDateTime newEndDateTime = LocalDateTime.of(day.getYear(), day.getMonthValue(), day.getDayOfMonth(), endHour, endMinute, endSecond);
                endTime = Date.from(newEndDateTime.atZone(ZoneId.systemDefault()).toInstant()); 

                //Check if notification is selected
                boolean hasNotification = editorJRBNotificationOn.isSelected();

                 //Create new Event
                HTimetableDAOImpl timetableInfoDAO = new HTimetableDAOImpl();
                HTimetable newEvent = new HTimetable();
                HTimetableLinkerDAOImpl timetableLinkerInfoDAO = new HTimetableLinkerDAOImpl();
                HTimetableLinker newEventLinker = new HTimetableLinker();

                //Set values to new dayOfWeek
                HDayOfTheWeekDAOImpl dayOfTheWeekInfoDAO = new HDayOfTheWeekDAOImpl();
                HDayOfTheWeek newDayOfWeek = new HDayOfTheWeek();
                newDayOfWeek = dayOfTheWeekInfoDAO.findById(eventDayIndex);

                //Find the current event 
                //HTimetable currentEvent = timetableInfoDAO.findById(activeTimetableId);


                //Set values to new event
                newEvent.setTimetableId(activeTimetableId);
                newEvent.setEventName(eventName);
                newEvent.setEventCategory(eventCategory);
                newEvent.setDay(eventDayIndex);
                newEvent.setFrequencyTypeId(eventFrequencyType);
                newEvent.setFrequencyAmount(eventFrequencyAmountIndex);
                newEvent.setEventStart(startTime);
                newEvent.setEventEnd(endTime);
                newEvent.setHasNotification(hasNotification);
                newEvent.setColor(colorStr);
                newEvent.setDayoftheweek(newDayOfWeek); 
                timetableInfoDAO.update(newEvent); //Save to DB
                
                //prompt about the event being updated
                JOptionPane.showMessageDialog(this, "Event updated successfully.");
                
                //Reload data
                if (mainWindow != null) {
                    mainWindow.reloadTimetableData();
                }

                //close the editor
                this.dispose();
                
            }
        } catch (Exception ex) {
            logger.CreateLog("error", "Exception caught trying to update event", ex);
            JOptionPane.showMessageDialog(this, "Event failed to update." + "\n cause: " + ex);
        } 
    }
    
     private void deleteEvent() {
        try {

            // prompt the user for confirmation
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this event?", "Delete Event", JOptionPane.YES_NO_OPTION);
            if (confirm != JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(this, "Event deletion cancelled.");
                return; // user chose not to delete
            }

            String message = "";
            //Find the current event 
            HTimetableDAOImpl timetableInfoDAO = new HTimetableDAOImpl();
            HTimetable currentEvent = timetableInfoDAO.findById(activeTimetableId);

            if (currentEvent != null) {
                //Delete the event
                timetableInfoDAO.delete(currentEvent);
                message = "Event deleted successfully.";
                
                
            } else {
                message = "Event not found.";
                logger.CreateLog("error", "Event not found when trying to delete.", null);
            }

            //find the timetableLinker
            HTimetableLinkerDAOImpl timetableLinkerInfoDAO = new HTimetableLinkerDAOImpl();
            HTimetableLinker currentEventLinker = timetableLinkerInfoDAO.findById(activeTimetableId);
            if (currentEventLinker != null) {
                //Delete the event
                timetableLinkerInfoDAO.delete(currentEventLinker);
                message += "\nEventLinker deleted successfully.";

            } else {
                message += "\nEventLinker not found.";
                logger.CreateLog("error", "EventLinker not found when trying to delete.", null);
            }

            JOptionPane.showMessageDialog(this, message);

            //Reload data
            mainWindow.reloadTimetableData();
            //Close the editor
            this.dispose();


        } catch (Exception ex) {
            logger.CreateLog("error", "Exception caught trying to delete event", ex);
            JOptionPane.showMessageDialog(this, "Event failed to delete." + "\n cause: " + ex);
        }
     
     }
    
    
    private void initializeEditorComp() {
        
        //JFrame settings 
        java.net.URL iconURL = getClass().getResource("/Assets/Icons/Logo.png");
        if (iconURL != null) {
            ImageIcon icon = new ImageIcon(iconURL);
            this.setIconImage(icon.getImage());
        } else {
            logger.CreateLog("warning", "\"Icon resource not found: /Assets/Icons/Logo.png\"", null);
            //Logger.getLogger(JTimetableLoginPage.class.getName()).log(Level.WARNING, "Icon resource not found: /Assets/Icons/Logo.png");
        }
        this.getContentPane().setBackground(new Color(51, 153, 255));
        
        
        // Update spinner
        //Start time
        SpinnerDateModel startTimeSpinnerModel = new SpinnerDateModel();
        startTimeSpinnerModel.setCalendarField(Calendar.MINUTE); // Set the field to minutes 
        editorJSStartTime.setModel(startTimeSpinnerModel);
        JSpinner.DateEditor startTimeEditor = new JSpinner.DateEditor(editorJSStartTime, "hh:mm a");
        editorJSStartTime.setEditor(startTimeEditor);
        java.util.Date startTime = mainWindow.convertLocalDateTimeToDate(LocalDateTime.now());
        editorJSStartTime.setValue(startTime);

        // adjust icon size for button
        editorJSStartTimeDBox.setIcon(new javax.swing.ImageIcon(
            new javax.swing.ImageIcon(getClass().getResource("/Assets/Icons/down.png"))
            .getImage().getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH)));
       
        // Add a drop-down menu for time selection using the editJSStartTimeDBox button
        editorJSStartTimeDBox.addActionListener(e -> {
            JPopupMenu timeMenu = new JPopupMenu();
            String[] times = {
            "12:00 AM", "1:00 AM", "2:00 AM", "3:00 AM", "4:00 AM", "5:00 AM",
            "6:00 AM", "7:00 AM", "8:00 AM", "9:00 AM", "10:00 AM", "11:00 AM",
            "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM",
            "6:00 PM", "7:00 PM", "8:00 PM", "9:00 PM", "10:00 PM", "11:00 PM"
            };

            for (String time : times) {
            JMenuItem menuItem = new JMenuItem(time);
            menuItem.addActionListener(evt -> {
                try {
                java.util.Date selectedTime = new java.text.SimpleDateFormat("hh:mm a").parse(time);
                editorJSStartTime.setValue(selectedTime);
                } catch (Exception ex) {
                ex.printStackTrace();
                }
            });
            timeMenu.add(menuItem);
            }

            timeMenu.show(editorJSStartTimeDBox, editorJSStartTimeDBox.getWidth() / 2, editorJSStartTimeDBox.getHeight());
        }); 

        //Endtime
        SpinnerDateModel endTimeSpinnerModel = new SpinnerDateModel();
        endTimeSpinnerModel.setCalendarField(Calendar.MINUTE); // Set the field to minutes 
        editorJSEndTime.setModel(endTimeSpinnerModel);
        JSpinner.DateEditor endTimeEditor = new JSpinner.DateEditor(editorJSEndTime, "hh:mm a");
        editorJSEndTime.setEditor(endTimeEditor);
        java.util.Date endTime =  mainWindow.convertLocalDateTimeToDate(LocalDateTime.now());
        editorJSEndTime.setValue(endTime);

        // adjust icon size for button
        editorJSEndTimeDBox.setIcon(new javax.swing.ImageIcon(
            new javax.swing.ImageIcon(getClass().getResource("/Assets/Icons/down.png"))
            .getImage().getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH)));

        // Add a drop-down menu for time selection using the editJSEndTimeDBox button
        editorJSEndTimeDBox.addActionListener(e -> {
            JPopupMenu timeMenu = new JPopupMenu();
            String[] times = {
            "12:00 AM", "1:00 AM", "2:00 AM", "3:00 AM", "4:00 AM", "5:00 AM",
            "6:00 AM", "7:00 AM", "8:00 AM", "9:00 AM", "10:00 AM", "11:00 AM",
            "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM",
            "6:00 PM", "7:00 PM", "8:00 PM", "9:00 PM", "10:00 PM", "11:00 PM"
            };

            for (String time : times) {
            JMenuItem menuItem = new JMenuItem(time);
            menuItem.addActionListener(evt -> {
                try {
                java.util.Date selectedTime = new java.text.SimpleDateFormat("hh:mm a").parse(time);
                editorJSEndTime.setValue(selectedTime);
                } catch (Exception ex) {
                ex.printStackTrace();
                }
            });
            timeMenu.add(menuItem);
            }

            timeMenu.show(editorJSEndTimeDBox, editorJSEndTimeDBox.getWidth() / 2, editorJSEndTimeDBox.getHeight());
        });

        //RepeatEventAmount
        editorJCBRepeatAmount.setEnabled(false);
        
        // Add event Listeners
        setupRepeatEventListener();
        setupColorPickerListener();
        loadEditorData();
    }
    
    private void loadEditorData() {

        //Load the data to the editor
        try {
            //Find the current event 
            HTimetableDAOImpl timetableInfoDAO = new HTimetableDAOImpl();
            HTimetable currentEvent = timetableInfoDAO.findById(activeTimetableId);
            if (currentEvent != null) {
                //Set values to the editor
                editorJTFName.setText(currentEvent.getEventName());
                editorJCBCategory.setSelectedItem(currentEvent.getEventCategory());
                editorJCBDay.setSelectedItem(currentEvent.getDay());
                editorJCBRepeatEvent.setSelectedItem(currentEvent.getFrequencyTypeId());
                editorJCBRepeatAmount.setSelectedItem(currentEvent.getFrequencyAmount());
                editorJSStartTime.setValue(currentEvent.getEventStart());
                editorJSEndTime.setValue(currentEvent.getEventEnd());
                
                //Set the color of the text field
                String colorStr = currentEvent.getColor();
                String colorStrFormated = colorStr.replace("java.awt.Color[r=", "RGB(").replace(",g=", ",").replace(",b=", ",").replace("]", ")");
                Color color = mainWindow.convertStringToColor(colorStr);
                editorTBColor.setBackground(color);
                editorTBColorStr.setText(colorStrFormated);

                //Set notification
                if (currentEvent.isHasNotification()) {
                    editorJRBNotificationOn.setSelected(true);
                    editorJRBNotificationOff.setSelected(false);
                } else {
                    editorJRBNotificationOn.setSelected(false);
                    editorJRBNotificationOff.setSelected(true);
                }
            }
        } catch (Exception ex) {
            logger.CreateLog("error", "Exception caught trying to load event data", ex);
            JOptionPane.showMessageDialog(this, "Failed to load event data." + "\n cause: " + ex);
        }
    }


}//end of class
