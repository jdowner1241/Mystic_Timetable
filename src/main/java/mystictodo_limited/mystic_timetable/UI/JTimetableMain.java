/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mystictodo_limited.mystic_timetable.UI;

import com.github.lgooddatepicker.components.TimePicker;
import com.github.lgooddatepicker.components.TimePickerSettings;
import jakarta.persistence.criteria.TemporalField;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.WeekFields;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import mystictodo_limited.mystic_timetable.db.DbConnectionManager;
import mystictodo_limited.mystic_timetable.hibernate.*;
import mystictodo_limited.mystic_timetable.tools.validCheck;

/**
 *
 * @author Jamario_Downer
 */
public class JTimetableMain extends javax.swing.JFrame {

    /**
     * Creates new form JTimeTableMain
     */
    public JTimetableMain() {
         //Create instance of DbConnectionManager for logger
        logger = new DbConnectionManager(JTimetableMain.class);
        logger.CreateLog("info", "Default Constructor Triggered.", null); //user logger method from DbConnectionManager to create logs.
        
        initComponents();//default method from JTimetableMain
        
        ChooseInitailValue(1, "Guest");
        
        
        UpdateFolderList();
        initialCreateTable();
        
        ChooseFolder(1, 1);
        getTimetable(1);
        populateTimetableData(1, 1);
        updateTimeTableForWeek(eventWeekList, activeWeekIndex);



    }
    
    public JTimetableMain(int userId, String userName){
        this();
        ChooseInitailValue(userId, userName);
        
        //UpdateFolderList();
        //populateTableData();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NotificationRadio = new javax.swing.ButtonGroup();
        EventColorSelectorDialog = new javax.swing.JDialog();
        EventColorSelector = new javax.swing.JColorChooser();
        TimetablePanel = new javax.swing.JLayeredPane();
        jScrollPaneTimetable = new javax.swing.JScrollPane();
        jtest = new javax.swing.JDialog();
        jLabel10 = new javax.swing.JLabel();
        testTimetableId = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        testEventStart = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        testEventName = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        testEventEnd = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        testEventCategory = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        testFrequency = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        testDay = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        testColor = new javax.swing.JTextField();
        HasNotification = new javax.swing.JLabel();
        testHasNotification = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel4 = new javax.swing.JPanel();
        jBackToMain = new javax.swing.JButton();
        jUserName = new javax.swing.JLabel();
        MainLeft = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        FolderControls = new javax.swing.JPanel();
        jBFolderRemove = new javax.swing.JButton();
        jBFolderAdd = new javax.swing.JButton();
        jScrollPaneFolder = new javax.swing.JScrollPane();
        MainRight = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        editJRBNotificationOn = new javax.swing.JRadioButton();
        editJRBNotificationOff = new javax.swing.JRadioButton();
        editJLNotification = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        editJLColor = new javax.swing.JLabel();
        editTBColor = new javax.swing.JTextField();
        editTbSetColor = new javax.swing.JToggleButton();
        editTBColorStr = new javax.swing.JTextField();
        editJLName = new javax.swing.JLabel();
        editJTFName = new javax.swing.JTextField();
        editJLCategory = new javax.swing.JLabel();
        editJCBCategory = new javax.swing.JComboBox<>();
        editJLDay = new javax.swing.JLabel();
        editJCBDay = new javax.swing.JComboBox<>();
        editJLRepeatEvent = new javax.swing.JLabel();
        editJCBRepeatEvent = new javax.swing.JComboBox<>();
        editJLRepeatAmount = new javax.swing.JLabel();
        editJCBRepeatAmount = new javax.swing.JComboBox<>();
        editJPaneEndTime = new javax.swing.JPanel();
        editJLEndTime = new javax.swing.JLabel();
        editJSEndTime = new javax.swing.JSpinner();
        editJSEndTimeDBox = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        editJLStartTime = new javax.swing.JLabel();
        editJSStartTime = new javax.swing.JSpinner();
        editJSStartTimeDBox = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        editJBAddEvent = new javax.swing.JButton();
        editJBCancelEvent = new javax.swing.JButton();
        MainMiddle = new javax.swing.JLayeredPane();
        jBHideMainLeft = new javax.swing.JButton();
        TimetableDatePanel = new javax.swing.JPanel();
        jTFCurrentWeekRange = new javax.swing.JTextField();
        jBPreviousWeek = new javax.swing.JButton();
        jBNextWeek = new javax.swing.JButton();
        jBHideMainRight = new javax.swing.JButton();
        jPTimetableRoot = new javax.swing.JPanel();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuFile_ItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuSettings = new javax.swing.JMenu();
        jMenuSettings_ItemOptions = new javax.swing.JMenuItem();
        jMenuSettings_ItemImportExportTool = new javax.swing.JMenuItem();

        EventColorSelectorDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        EventColorSelectorDialog.setLocation(editTbSetColor.getLocation());
        EventColorSelectorDialog.setMinimumSize(new java.awt.Dimension(640, 326));
        EventColorSelectorDialog.setUndecorated(true);
        EventColorSelectorDialog.setType(java.awt.Window.Type.POPUP);

        EventColorSelector.setMaximumSize(new java.awt.Dimension(640, 326));
        EventColorSelector.setName(""); // NOI18N
        EventColorSelector.setNextFocusableComponent(editTBColor);

        javax.swing.GroupLayout EventColorSelectorDialogLayout = new javax.swing.GroupLayout(EventColorSelectorDialog.getContentPane());
        EventColorSelectorDialog.getContentPane().setLayout(EventColorSelectorDialogLayout);
        EventColorSelectorDialogLayout.setHorizontalGroup(
            EventColorSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
            .addGroup(EventColorSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(EventColorSelectorDialogLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(EventColorSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        EventColorSelectorDialogLayout.setVerticalGroup(
            EventColorSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
            .addGroup(EventColorSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(EventColorSelectorDialogLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(EventColorSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        TimetablePanel.setAutoscrolls(true);
        TimetablePanel.setPreferredSize(new java.awt.Dimension(195, 850));

        TimetablePanel.setLayer(jScrollPaneTimetable, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout TimetablePanelLayout = new javax.swing.GroupLayout(TimetablePanel);
        TimetablePanel.setLayout(TimetablePanelLayout);
        TimetablePanelLayout.setHorizontalGroup(
            TimetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TimetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(TimetablePanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPaneTimetable, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        TimetablePanelLayout.setVerticalGroup(
            TimetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TimetablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(TimetablePanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPaneTimetable, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jtest.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel10.setText("TimetableId");

        jLabel11.setText("EventStart");

        jLabel12.setText("EventName");

        jLabel13.setText("EventEnd");

        jLabel14.setText("EventCategory");

        jLabel15.setText("Frequency");

        jLabel16.setText("Day");

        jLabel17.setText("Color");

        HasNotification.setText("HasNotification");

        javax.swing.GroupLayout jtestLayout = new javax.swing.GroupLayout(jtest.getContentPane());
        jtest.getContentPane().setLayout(jtestLayout);
        jtestLayout.setHorizontalGroup(
            jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jtestLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jtestLayout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(testDay, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jtestLayout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testEventCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jtestLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testEventName, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jtestLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(testTimetableId, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addGroup(jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jtestLayout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testEventStart, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jtestLayout.createSequentialGroup()
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(testColor, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jtestLayout.createSequentialGroup()
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(testFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jtestLayout.createSequentialGroup()
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(testEventEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jtestLayout.createSequentialGroup()
                            .addComponent(HasNotification, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(testHasNotification, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jtestLayout.setVerticalGroup(
            jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jtestLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(testTimetableId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(testEventStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(testEventName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(testEventEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(testEventCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(testFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(testDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(testColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jtestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HasNotification)
                    .addComponent(testHasNotification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.darkGray, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.gray));

        jBackToMain.setText("< Back");
        jBackToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBackToMainActionPerformed(evt);
            }
        });

        jUserName.setFont(new java.awt.Font("Vampire Wars", 1, 24)); // NOI18N
        jUserName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jUserName, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBackToMain)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jBackToMain)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );

        jLayeredPane1.setLayer(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        MainLeft.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153), null));
        MainLeft.setPreferredSize(new java.awt.Dimension(195, 850));

        jLabel1.setFont(new java.awt.Font("Vampire Wars", 1, 14)); // NOI18N
        jLabel1.setText("Folders");

        jBFolderRemove.setText("Remove");
        jBFolderRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFolderRemoveActionPerformed(evt);
            }
        });

        jBFolderAdd.setText("Add");
        jBFolderAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFolderAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FolderControlsLayout = new javax.swing.GroupLayout(FolderControls);
        FolderControls.setLayout(FolderControlsLayout);
        FolderControlsLayout.setHorizontalGroup(
            FolderControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FolderControlsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBFolderAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBFolderRemove)
                .addContainerGap())
        );
        FolderControlsLayout.setVerticalGroup(
            FolderControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FolderControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FolderControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBFolderRemove)
                    .addComponent(jBFolderAdd))
                .addContainerGap())
        );

        jScrollPaneFolder.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.gray));

        MainLeft.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        MainLeft.setLayer(FolderControls, javax.swing.JLayeredPane.DEFAULT_LAYER);
        MainLeft.setLayer(jScrollPaneFolder, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout MainLeftLayout = new javax.swing.GroupLayout(MainLeft);
        MainLeft.setLayout(MainLeftLayout);
        MainLeftLayout.setHorizontalGroup(
            MainLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainLeftLayout.createSequentialGroup()
                .addGroup(MainLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainLeftLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MainLeftLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(MainLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FolderControls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPaneFolder))))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        MainLeftLayout.setVerticalGroup(
            MainLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPaneFolder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FolderControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        MainRight.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153), null));
        MainRight.setMaximumSize(new java.awt.Dimension(220, 220));
        MainRight.setPreferredSize(new java.awt.Dimension(195, 850));

        jLabel2.setFont(new java.awt.Font("Vampire Wars", 1, 14)); // NOI18N
        jLabel2.setText("Event Info");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.gray));
        jPanel1.setAutoscrolls(true);
        jPanel1.setMaximumSize(new java.awt.Dimension(200, 2000));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 779));

        NotificationRadio.add(editJRBNotificationOn);
        editJRBNotificationOn.setText("Yes");

        NotificationRadio.add(editJRBNotificationOff);
        editJRBNotificationOff.setText("No");

        editJLNotification.setText("Enable Notification");
        editJLNotification.setMaximumSize(new java.awt.Dimension(170, 25));
        editJLNotification.setMinimumSize(new java.awt.Dimension(75, 25));
        editJLNotification.setPreferredSize(new java.awt.Dimension(160, 25));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(editJLNotification, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(editJRBNotificationOn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editJRBNotificationOff, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {editJRBNotificationOff, editJRBNotificationOn});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editJLNotification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editJRBNotificationOn)
                    .addComponent(editJRBNotificationOff))
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {editJRBNotificationOff, editJRBNotificationOn});

        editJLColor.setText("Color");
        editJLColor.setMaximumSize(new java.awt.Dimension(170, 25));
        editJLColor.setMinimumSize(new java.awt.Dimension(75, 25));
        editJLColor.setPreferredSize(new java.awt.Dimension(160, 25));

        editTBColor.setEditable(false);
        editTBColor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editTBColor.setToolTipText("");
        editTBColor.setAutoscrolls(false);

        editTbSetColor.setText("Set Color");
        editTbSetColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTbSetColorActionPerformed(evt);
            }
        });

        editTBColorStr.setEditable(false);
        editTBColorStr.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editTBColorStr.setToolTipText("");
        editTBColorStr.setAutoscrolls(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(editJLColor, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editTBColorStr)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(editTBColor, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editTbSetColor, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editJLColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(editTBColorStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editTBColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editTbSetColor))
                .addContainerGap())
        );

        editJLName.setText("Name");
        editJLName.setMaximumSize(new java.awt.Dimension(170, 25));
        editJLName.setMinimumSize(new java.awt.Dimension(75, 25));
        editJLName.setPreferredSize(new java.awt.Dimension(160, 25));

        editJTFName.setToolTipText("Event Name");
        editJTFName.setMaximumSize(new java.awt.Dimension(170, 25));
        editJTFName.setMinimumSize(new java.awt.Dimension(75, 25));
        editJTFName.setPreferredSize(new java.awt.Dimension(160, 25));

        editJLCategory.setText("Category");
        editJLCategory.setMaximumSize(new java.awt.Dimension(170, 25));
        editJLCategory.setMinimumSize(new java.awt.Dimension(75, 25));
        editJLCategory.setPreferredSize(new java.awt.Dimension(160, 25));

        editJCBCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        editJCBCategory.setMaximumSize(new java.awt.Dimension(170, 25));
        editJCBCategory.setMinimumSize(new java.awt.Dimension(75, 25));
        editJCBCategory.setPreferredSize(new java.awt.Dimension(160, 25));

        editJLDay.setText("Day");
        editJLDay.setMaximumSize(new java.awt.Dimension(170, 25));
        editJLDay.setMinimumSize(new java.awt.Dimension(75, 25));
        editJLDay.setPreferredSize(new java.awt.Dimension(160, 25));

        editJCBDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        editJCBDay.setMaximumSize(new java.awt.Dimension(170, 25));
        editJCBDay.setMinimumSize(new java.awt.Dimension(75, 25));
        editJCBDay.setPreferredSize(new java.awt.Dimension(160, 25));

        editJLRepeatEvent.setText("Repeat Event");
        editJLRepeatEvent.setMaximumSize(new java.awt.Dimension(170, 25));
        editJLRepeatEvent.setMinimumSize(new java.awt.Dimension(75, 25));
        editJLRepeatEvent.setPreferredSize(new java.awt.Dimension(160, 25));

        editJCBRepeatEvent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Once", "Daily", "Weekly", "Monthly" }));
        editJCBRepeatEvent.setMaximumSize(new java.awt.Dimension(170, 25));
        editJCBRepeatEvent.setMinimumSize(new java.awt.Dimension(75, 25));
        editJCBRepeatEvent.setPreferredSize(new java.awt.Dimension(160, 25));
        editJCBRepeatEvent.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                editJCBRepeatEventPropertyChange(evt);
            }
        });

        editJLRepeatAmount.setText("How Often");
        editJLRepeatAmount.setMaximumSize(new java.awt.Dimension(170, 25));
        editJLRepeatAmount.setMinimumSize(new java.awt.Dimension(75, 25));
        editJLRepeatAmount.setPreferredSize(new java.awt.Dimension(160, 25));

        editJCBRepeatAmount.setMaximumSize(new java.awt.Dimension(170, 25));
        editJCBRepeatAmount.setMinimumSize(new java.awt.Dimension(75, 25));
        editJCBRepeatAmount.setPreferredSize(new java.awt.Dimension(160, 25));

        editJLEndTime.setText("End Time");
        editJLEndTime.setMaximumSize(new java.awt.Dimension(170, 25));
        editJLEndTime.setMinimumSize(new java.awt.Dimension(75, 25));
        editJLEndTime.setPreferredSize(new java.awt.Dimension(160, 25));

        editJSEndTime.setMaximumSize(new java.awt.Dimension(170, 25));
        editJSEndTime.setMinimumSize(new java.awt.Dimension(75, 25));
        editJSEndTime.setPreferredSize(new java.awt.Dimension(160, 25));

        editJSEndTimeDBox.setBackground(new java.awt.Color(153, 186, 204));
        editJSEndTimeDBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/Icons/down.png"))); // NOI18N
        editJSEndTimeDBox.setAlignmentX(0.5F);
        editJSEndTimeDBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editJSEndTimeDBox.setInheritsPopupMenu(true);
        editJSEndTimeDBox.setMaximumSize(new java.awt.Dimension(40, 40));
        editJSEndTimeDBox.setMinimumSize(new java.awt.Dimension(40, 40));
        editJSEndTimeDBox.setPreferredSize(new java.awt.Dimension(40, 40));

        javax.swing.GroupLayout editJPaneEndTimeLayout = new javax.swing.GroupLayout(editJPaneEndTime);
        editJPaneEndTime.setLayout(editJPaneEndTimeLayout);
        editJPaneEndTimeLayout.setHorizontalGroup(
            editJPaneEndTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editJPaneEndTimeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editJPaneEndTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editJLEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(editJPaneEndTimeLayout.createSequentialGroup()
                        .addComponent(editJSEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editJSEndTimeDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        editJPaneEndTimeLayout.setVerticalGroup(
            editJPaneEndTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editJPaneEndTimeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editJLEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editJPaneEndTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editJSEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editJSEndTimeDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        editJLStartTime.setText("Start Time");
        editJLStartTime.setMaximumSize(new java.awt.Dimension(170, 25));
        editJLStartTime.setMinimumSize(new java.awt.Dimension(75, 25));
        editJLStartTime.setPreferredSize(new java.awt.Dimension(160, 25));

        editJSStartTime.setMaximumSize(new java.awt.Dimension(170, 25));
        editJSStartTime.setMinimumSize(new java.awt.Dimension(75, 25));
        editJSStartTime.setPreferredSize(new java.awt.Dimension(160, 25));

        editJSStartTimeDBox.setBackground(new java.awt.Color(153, 186, 204));
        editJSStartTimeDBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/Icons/down.png"))); // NOI18N
        editJSStartTimeDBox.setAlignmentX(0.5F);
        editJSStartTimeDBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editJSStartTimeDBox.setInheritsPopupMenu(true);
        editJSStartTimeDBox.setMaximumSize(new java.awt.Dimension(40, 40));
        editJSStartTimeDBox.setMinimumSize(new java.awt.Dimension(40, 40));
        editJSStartTimeDBox.setPreferredSize(new java.awt.Dimension(40, 40));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(editJLStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(9, 9, 9))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(editJSStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editJSStartTimeDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 13, Short.MAX_VALUE))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editJLStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editJSStartTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editJSStartTimeDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(editJLRepeatEvent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                        .addComponent(editJLDay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(editJCBDay, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(editJCBRepeatEvent, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(editJLRepeatAmount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(editJPaneEndTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, Short.MAX_VALUE)
                        .addComponent(editJCBRepeatAmount, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(editJLCategory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addComponent(editJCBCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(editJLName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addComponent(editJTFName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(editJLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editJTFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editJLCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editJCBCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editJLDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editJCBDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editJLRepeatEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editJCBRepeatEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editJLRepeatAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editJCBRepeatAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editJPaneEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        editJBAddEvent.setText("Add Event");
        editJBAddEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJBAddEventActionPerformed(evt);
            }
        });

        editJBCancelEvent.setText("Cancel");
        editJBCancelEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJBCancelEventActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editJBAddEvent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editJBCancelEvent)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editJBAddEvent)
                    .addComponent(editJBCancelEvent))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainRight.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        MainRight.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        MainRight.setLayer(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout MainRightLayout = new javax.swing.GroupLayout(MainRight);
        MainRight.setLayout(MainRightLayout);
        MainRightLayout.setHorizontalGroup(
            MainRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainRightLayout.createSequentialGroup()
                .addGroup(MainRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainRightLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MainRightLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(MainRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10))
        );
        MainRightLayout.setVerticalGroup(
            MainRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        MainMiddle.setPreferredSize(new java.awt.Dimension(195, 850));
        MainMiddle.setRequestFocusEnabled(false);

        jBHideMainLeft.setText("<<");
        jBHideMainLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHideMainLeftActionPerformed(evt);
            }
        });

        jTFCurrentWeekRange.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCurrentWeekRange.setText("Mar 10 to  Mar 17");
        jTFCurrentWeekRange.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jTFCurrentWeekRangeComponentAdded(evt);
            }
        });
        jTFCurrentWeekRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFCurrentWeekRangeActionPerformed(evt);
            }
        });

        jBPreviousWeek.setText("<<");
        jBPreviousWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPreviousWeekActionPerformed(evt);
            }
        });

        jBNextWeek.setText(">>");
        jBNextWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNextWeekActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TimetableDatePanelLayout = new javax.swing.GroupLayout(TimetableDatePanel);
        TimetableDatePanel.setLayout(TimetableDatePanelLayout);
        TimetableDatePanelLayout.setHorizontalGroup(
            TimetableDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TimetableDatePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBPreviousWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTFCurrentWeekRange, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBNextWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TimetableDatePanelLayout.setVerticalGroup(
            TimetableDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TimetableDatePanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(TimetableDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFCurrentWeekRange, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBPreviousWeek)
                    .addComponent(jBNextWeek))
                .addGap(10, 10, 10))
        );

        jBHideMainRight.setText(">>");
        jBHideMainRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHideMainRightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPTimetableRootLayout = new javax.swing.GroupLayout(jPTimetableRoot);
        jPTimetableRoot.setLayout(jPTimetableRootLayout);
        jPTimetableRootLayout.setHorizontalGroup(
            jPTimetableRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 669, Short.MAX_VALUE)
        );
        jPTimetableRootLayout.setVerticalGroup(
            jPTimetableRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 787, Short.MAX_VALUE)
        );

        MainMiddle.setLayer(jBHideMainLeft, javax.swing.JLayeredPane.DEFAULT_LAYER);
        MainMiddle.setLayer(TimetableDatePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        MainMiddle.setLayer(jBHideMainRight, javax.swing.JLayeredPane.DEFAULT_LAYER);
        MainMiddle.setLayer(jPTimetableRoot, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout MainMiddleLayout = new javax.swing.GroupLayout(MainMiddle);
        MainMiddle.setLayout(MainMiddleLayout);
        MainMiddleLayout.setHorizontalGroup(
            MainMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMiddleLayout.createSequentialGroup()
                .addGroup(MainMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainMiddleLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TimetableDatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(MainMiddleLayout.createSequentialGroup()
                        .addComponent(jBHideMainLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jPTimetableRoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5)
                        .addComponent(jBHideMainRight, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        MainMiddleLayout.setVerticalGroup(
            MainMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainMiddleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TimetableDatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(MainMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainMiddleLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jBHideMainLeft))
                    .addGroup(MainMiddleLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jBHideMainRight))
                    .addGroup(MainMiddleLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPTimetableRoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(13, 13, 13))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLayeredPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(MainLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MainMiddle, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
                        .addGap(5, 5, 5)
                        .addComponent(MainRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(MainLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                        .addComponent(MainRight, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE))
                    .addComponent(MainMiddle, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE))
                .addContainerGap())
        );

        jMenuFile.setText("File");

        jMenuFile_ItemExit.setText("Exit");
        jMenuFile_ItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFile_ItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuFile_ItemExit);

        jMenuBarMain.add(jMenuFile);

        jMenuEdit.setText("Edit");
        jMenuBarMain.add(jMenuEdit);

        jMenuSettings.setText("Settings");
        jMenuSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSettingsActionPerformed(evt);
            }
        });

        jMenuSettings_ItemOptions.setText("Options");
        jMenuSettings_ItemOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSettings_ItemOptionsActionPerformed(evt);
            }
        });
        jMenuSettings.add(jMenuSettings_ItemOptions);

        jMenuSettings_ItemImportExportTool.setText("Import/Export Tool");
        jMenuSettings_ItemImportExportTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSettings_ItemImportExportToolActionPerformed(evt);
            }
        });
        jMenuSettings.add(jMenuSettings_ItemImportExportTool);

        jMenuBarMain.add(jMenuSettings);

        setJMenuBar(jMenuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBackToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBackToMainActionPerformed
        backToMain();
    }//GEN-LAST:event_jBackToMainActionPerformed

    private void jMenuFile_ItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFile_ItemExitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuFile_ItemExitActionPerformed

    private void jMenuSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSettingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuSettingsActionPerformed

    private void jMenuSettings_ItemOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSettings_ItemOptionsActionPerformed
        OpenOptions();
    }//GEN-LAST:event_jMenuSettings_ItemOptionsActionPerformed

    private void jMenuSettings_ItemImportExportToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSettings_ItemImportExportToolActionPerformed
        OpenImportExportTool();
    }//GEN-LAST:event_jMenuSettings_ItemImportExportToolActionPerformed

    private void jTFCurrentWeekRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFCurrentWeekRangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFCurrentWeekRangeActionPerformed

    private void editTbSetColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTbSetColorActionPerformed
       if(editTbSetColor.isSelected()){
           EventColorSelectorDialog.setVisible(true);
           //EventColorSelectorDialog.setSize(600, 200);
           Point location = getLocationRelativeToScreen(editTBColor);
           location.y += editTBColor.getHeight(); // adjust to below the button
           EventColorSelectorDialog.setLocation(location);
           
       }else{
           EventColorSelectorDialog.setVisible(false);    
       }
    }//GEN-LAST:event_editTbSetColorActionPerformed

    private void jBHideMainLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHideMainLeftActionPerformed
        if(MainLeft.isVisible() == true){
            MainLeft.setVisible(false); 
            jBHideMainLeft.setText(">>");
        }else{
            MainLeft.setVisible(true); 
            jBHideMainLeft.setText("<<");
        }
    }//GEN-LAST:event_jBHideMainLeftActionPerformed

    private void jBHideMainRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHideMainRightActionPerformed
        if(MainRight.isVisible() == true){
            MainRight.setVisible(false); 
            jBHideMainRight.setText("<<");
        }else{
            MainRight.setVisible(true); 
            jBHideMainRight.setText(">>");
        }
    }//GEN-LAST:event_jBHideMainRightActionPerformed

    private void jTFCurrentWeekRangeComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jTFCurrentWeekRangeComponentAdded
        
    }//GEN-LAST:event_jTFCurrentWeekRangeComponentAdded

    private void jBNextWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNextWeekActionPerformed

        int newWeekIndex = activeWeekIndex + 1;
        changeCurrentWeekRange(newWeekIndex);
    }//GEN-LAST:event_jBNextWeekActionPerformed

    private void jBPreviousWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPreviousWeekActionPerformed

        int newWeekIndex = activeWeekIndex - 1;
        changeCurrentWeekRange(newWeekIndex);
    }//GEN-LAST:event_jBPreviousWeekActionPerformed

    private void editJBAddEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJBAddEventActionPerformed
        addNewEvent();
        
    }//GEN-LAST:event_editJBAddEventActionPerformed

    private void editJCBRepeatEventPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_editJCBRepeatEventPropertyChange
  
    }//GEN-LAST:event_editJCBRepeatEventPropertyChange

    private void jBFolderAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFolderAddActionPerformed
       AddNewFolder();
    }//GEN-LAST:event_jBFolderAddActionPerformed

    private void jBFolderRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFolderRemoveActionPerformed
        RemoveFolder();
    }//GEN-LAST:event_jBFolderRemoveActionPerformed

    private void editJBCancelEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJBCancelEventActionPerformed
        CancelNewEvent();
    }//GEN-LAST:event_editJBCancelEventActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTimetableMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTimetableMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTimetableMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTimetableMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JTimetableMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser EventColorSelector;
    private javax.swing.JDialog EventColorSelectorDialog;
    private javax.swing.JPanel FolderControls;
    private javax.swing.JLabel HasNotification;
    private javax.swing.JLayeredPane MainLeft;
    private javax.swing.JLayeredPane MainMiddle;
    private javax.swing.JLayeredPane MainRight;
    private javax.swing.ButtonGroup NotificationRadio;
    private javax.swing.JPanel TimetableDatePanel;
    private javax.swing.JLayeredPane TimetablePanel;
    private javax.swing.JButton editJBAddEvent;
    private javax.swing.JButton editJBCancelEvent;
    private javax.swing.JComboBox<String> editJCBCategory;
    private javax.swing.JComboBox<String> editJCBDay;
    private javax.swing.JComboBox<String> editJCBRepeatAmount;
    private javax.swing.JComboBox<String> editJCBRepeatEvent;
    private javax.swing.JLabel editJLCategory;
    private javax.swing.JLabel editJLColor;
    private javax.swing.JLabel editJLDay;
    private javax.swing.JLabel editJLEndTime;
    private javax.swing.JLabel editJLName;
    private javax.swing.JLabel editJLNotification;
    private javax.swing.JLabel editJLRepeatAmount;
    private javax.swing.JLabel editJLRepeatEvent;
    private javax.swing.JLabel editJLStartTime;
    private javax.swing.JPanel editJPaneEndTime;
    private javax.swing.JRadioButton editJRBNotificationOff;
    private javax.swing.JRadioButton editJRBNotificationOn;
    private javax.swing.JSpinner editJSEndTime;
    private javax.swing.JButton editJSEndTimeDBox;
    private javax.swing.JSpinner editJSStartTime;
    private javax.swing.JButton editJSStartTimeDBox;
    private javax.swing.JTextField editJTFName;
    private javax.swing.JTextField editTBColor;
    private javax.swing.JTextField editTBColorStr;
    private javax.swing.JToggleButton editTbSetColor;
    private javax.swing.JButton jBFolderAdd;
    private javax.swing.JButton jBFolderRemove;
    private javax.swing.JButton jBHideMainLeft;
    private javax.swing.JButton jBHideMainRight;
    private javax.swing.JButton jBNextWeek;
    private javax.swing.JButton jBPreviousWeek;
    private javax.swing.JButton jBackToMain;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuFile_ItemExit;
    private javax.swing.JMenu jMenuSettings;
    private javax.swing.JMenuItem jMenuSettings_ItemImportExportTool;
    private javax.swing.JMenuItem jMenuSettings_ItemOptions;
    private javax.swing.JPanel jPTimetableRoot;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPaneFolder;
    private javax.swing.JScrollPane jScrollPaneTimetable;
    private javax.swing.JTextField jTFCurrentWeekRange;
    private javax.swing.JLabel jUserName;
    private javax.swing.JDialog jtest;
    private javax.swing.JTextField testColor;
    private javax.swing.JTextField testDay;
    private javax.swing.JTextField testEventCategory;
    private javax.swing.JTextField testEventEnd;
    private javax.swing.JTextField testEventName;
    private javax.swing.JTextField testEventStart;
    private javax.swing.JTextField testFrequency;
    private javax.swing.JTextField testHasNotification;
    private javax.swing.JTextField testTimetableId;
    // End of variables declaration//GEN-END:variables

    //Feilds >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   
    private DbConnectionManager logger;
    private String userName;
    private int activeUserId;
    private int activeFolderId;
    private int activeUserAndFolderId;
    //private int activeTimetableLinkerId;
    private int activeTimetableId;
    private int activeWeekIndex;
    private HUsers userInfo;
    private HUsersDAOImpl userInfoDAO;
    private List<HTimetableLinker> timetableLinkerList;
    private HTimetableLinkerDAOImpl timetableLinkerInfoDAO;
    private HTimetable timetableInfo;
    private HTimetableDAOImpl timetableInfoDAO;
    private DefaultTableModel tableModel;
    private JTable jTimetable;
    private List<EventDayRange> eventWeekList;
    

    
    private void ChooseFolder(int folderID, int folderPerUserId) {
        
        setActiveFolderId(folderID);
        setActiveUserAndFolderId(folderPerUserId);    
            
        getTimetableLinkerList(folderPerUserId);
        
        reloadTimetableData();

    }
    
    private void getTimetableLinkerList(int userAndFolderId){
        
        timetableLinkerList.clear();
        
        List<HTimetableLinker> linkListAll = timetableLinkerInfoDAO.findAll();
        for(HTimetableLinker currentLink : linkListAll){
                    if(currentLink.getUserAndFolderId() == userAndFolderId){
                        timetableLinkerList.add(currentLink);
                    }
        }
        
    }
    
    private List<HTimetable> getTimetableList(){
        
        List<Integer> timetableIdList = new ArrayList<>();
        List<HTimetable> timetableList = new ArrayList<>();
        
        for (HTimetableLinker currentLink : timetableLinkerList){
            timetableIdList.add(currentLink.getEventId());
        }
        
        List<HTimetable> timetableListAll = timetableInfoDAO.findAll();       
        for (HTimetable timetable : timetableListAll){
            for (Integer currentId : timetableIdList){
                if (timetable.getTimetableId() == currentId ){
                    timetableList.add(timetable);
                }
            }
        }
        
        return timetableList;
    }
    
    private void getTimetable(int eventId){
        timetableInfo = timetableInfoDAO.findById(eventId);         
    }
    
     
    private void populateTimetableData(int userAndFolderId, int weekIndex){
        

        try{
            getTimetableLinkerList(userAndFolderId);
            List<HTimetable> timetableList = getTimetableList();
            eventWeekList.clear();
            for ( HTimetable current : timetableList){
                setListOfTableIndex(current);
            }
            
            updateTimeTableForWeek(eventWeekList, weekIndex);
            
        } catch (Exception ex) {
            logger.CreateLog("error", "Exception caught", ex);
        }
    }
    
    private void setCurrentWeekRange(){
        //Update variables
        LocalDate currentDate = LocalDate.now();
        int currentYear = currentDate.getYear();
        int currentWeekIndex = getWeekIndex(currentDate);        
        activeWeekIndex = currentWeekIndex;
        
        LocalDate firstDayOfWeek = getFirstDayOfWeek(currentWeekIndex, currentYear);
        LocalDate lastDayOfWeek = getLastDayOfWeek(currentWeekIndex, currentYear);
        int firstDay = firstDayOfWeek.getDayOfMonth();
        int lastDay = lastDayOfWeek.getDayOfMonth();
        String firstMonth = firstDayOfWeek.getMonth().getDisplayName(TextStyle.SHORT, Locale.getDefault());
        String lastMonth = lastDayOfWeek.getMonth().getDisplayName(TextStyle.SHORT, Locale.getDefault());
        //Update UI
        jTFCurrentWeekRange.setText(firstMonth + " " + firstDay + " - " + lastMonth + " " + lastDay );
        
        if (!eventWeekList.isEmpty()){
            updateTimeTableForWeek(eventWeekList, currentWeekIndex);
        }else{
            logger.CreateLog("error", "eventWeekList is empty", null);
        }
    }
    
    private void changeCurrentWeekRange(int weekIndex){
        //Update variables
        //LocalDate currentYear = LocalDate.now().getYear()
        int currentYear = LocalDate.now().getYear();
        activeWeekIndex = weekIndex;
        
        LocalDate firstDayOfWeek = getFirstDayOfWeek(weekIndex, currentYear);
        LocalDate lastDayOfWeek = getLastDayOfWeek(weekIndex, currentYear);
        int firstDay = firstDayOfWeek.getDayOfMonth();
        int lastDay = lastDayOfWeek.getDayOfMonth();
        String firstMonth = firstDayOfWeek.getMonth().getDisplayName(TextStyle.SHORT, Locale.getDefault());
        String lastMonth = lastDayOfWeek.getMonth().getDisplayName(TextStyle.SHORT, Locale.getDefault());
        
        //Update UI
        jTFCurrentWeekRange.setText(firstMonth + " " + firstDay + " - " + lastMonth + " " + lastDay );
        
        
        if (!eventWeekList.isEmpty()){
            updateTimeTableForWeek(eventWeekList, weekIndex);
        }else{
            logger.CreateLog("error", "eventWeekList is empty", null);
        }
        
    }
 
   
    private void initializeEditorComp() {
        
        // Update spinner
        //Start time
        

//        // Use LGoodDatePicker for time selection
//        TimePickerSettings timePickerSettings = new TimePickerSettings();
//        timePickerSettings.setFormatForDisplayTime("hh:mm a"); // Use 12-hour clock with AM/PM
//        TimePicker startTimePicker1 = new TimePicker(timePickerSettings);
//        startTimePicker1.setTime(LocalTime.now()); // Set the default time to the current time
//        editJPaneStartTime.setLayout(new BorderLayout());
//        //editJPaneStartTime.setPreferredSize(new Dimension(150, 30)); // Set preferred size for the panel
//        editJPaneStartTime.add(startTimePicker1, BorderLayout.CENTER);
//        startTimePicker1.setVisible(true);

        //Starttime
        SpinnerDateModel startTimeSpinnerModel = new SpinnerDateModel();
        startTimeSpinnerModel.setCalendarField(Calendar.MINUTE); // Set the field to minutes 
        editJSStartTime.setModel(startTimeSpinnerModel);
        JSpinner.DateEditor startTimeEditor = new JSpinner.DateEditor(editJSStartTime, "hh:mm a");
        editJSStartTime.setEditor(startTimeEditor);
        java.util.Date startTime = convertLocalDateTimeToDate(LocalDateTime.now());
        editJSStartTime.setValue(startTime);

        // adjust icon size for button
        editJSStartTimeDBox.setIcon(new javax.swing.ImageIcon(
            new javax.swing.ImageIcon(getClass().getResource("/Assets/Icons/down.png"))
            .getImage().getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH)));
       
        // Add a drop-down menu for time selection using the editJSStartTimeDBox button
        editJSStartTimeDBox.addActionListener(e -> {
            JPopupMenu timeMenu = new JPopupMenu();
            String[] times = {
            "12:00 AM", "1:00 AM", "2:00 AM", "3:00 AM", "4:00 AM", "5:00 AM",
            "6:00 AM", "7:00 AM", "8:00 AM", "9:00 AM", "10:00 AM", "11:00 AM",
            "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM",
            "6:00 PM", "7:00 PM", "8:00 PM", "9:00 PM", "10:00 PM", "11:00 PM"
            };

            for (String time : times) {
            JMenuItem menuItem = new JMenuItem(time);
            menuItem.addActionListener(evt -> {
                try {
                java.util.Date selectedTime = new java.text.SimpleDateFormat("hh:mm a").parse(time);
                editJSStartTime.setValue(selectedTime);
                } catch (Exception ex) {
                ex.printStackTrace();
                }
            });
            timeMenu.add(menuItem);
            }

            timeMenu.show(editJSStartTimeDBox, editJSStartTimeDBox.getWidth() / 2, editJSStartTimeDBox.getHeight());
        });

        //Endtime
        SpinnerDateModel endTimeSpinnerModel = new SpinnerDateModel();
        endTimeSpinnerModel.setCalendarField(Calendar.MINUTE); // Set the field to minutes 
        editJSEndTime.setModel(endTimeSpinnerModel);
        JSpinner.DateEditor endTimeEditor = new JSpinner.DateEditor(editJSEndTime, "hh:mm a");
        editJSEndTime.setEditor(endTimeEditor);
        java.util.Date endTime = convertLocalDateTimeToDate(LocalDateTime.now());
        editJSEndTime.setValue(endTime);

        // adjust icon size for button
        editJSEndTimeDBox.setIcon(new javax.swing.ImageIcon(
            new javax.swing.ImageIcon(getClass().getResource("/Assets/Icons/down.png"))
            .getImage().getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH)));

        // Add a drop-down menu for time selection using the editJSEndTimeDBox1 button
        editJSEndTimeDBox.addActionListener(e -> {
            JPopupMenu timeMenu = new JPopupMenu();
            String[] times = {
            "12:00 AM", "1:00 AM", "2:00 AM", "3:00 AM", "4:00 AM", "5:00 AM",
            "6:00 AM", "7:00 AM", "8:00 AM", "9:00 AM", "10:00 AM", "11:00 AM",
            "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM",
            "6:00 PM", "7:00 PM", "8:00 PM", "9:00 PM", "10:00 PM", "11:00 PM"
            };

            for (String time : times) {
            JMenuItem menuItem = new JMenuItem(time);
            menuItem.addActionListener(evt -> {
                try {
                java.util.Date selectedTime = new java.text.SimpleDateFormat("hh:mm a").parse(time);
                editJSEndTime.setValue(selectedTime);
                } catch (Exception ex) {
                ex.printStackTrace();
                }
            });
            timeMenu.add(menuItem);
            }

            timeMenu.show(editJSEndTimeDBox, editJSEndTimeDBox.getWidth() / 2, editJSEndTimeDBox.getHeight());
        });

        //RepeatEventAmount
        editJCBRepeatAmount.setEnabled(false);
        
        // Add event Listeners
        setupRepeatEventListener();
        setupColorPickerListener();

        //Add event to the table
        addEventToTable();
    }
    
    private void addNewEvent() {
        
        boolean isValid = true;
      
        //Check if all fields are valid
        isValid = eventValidCheck();

        try {
            if (isValid) {
                //Get values from UI
                String eventName = editJTFName.getText();
                String eventCategory = editJCBCategory.getSelectedItem().toString();
                int eventDayIndex = editJCBDay.getSelectedIndex() + 1;
                int eventFrequencyType = editJCBRepeatEvent.getSelectedIndex();
                int eventFrequencyAmountIndex = 0;
                if(eventFrequencyType != 0 ) {
                    eventFrequencyAmountIndex = editJCBRepeatAmount.getSelectedIndex() + 1;
                } 
                
                Color color = EventColorSelector.getColor();
                String colorStr = color.toString();
                //get the active week index
                int weekIndex = activeWeekIndex;
                // Removed unused variable monthIndex
                int yearIndex = LocalDate.now().getYear();
                LocalDate day = getFirstDayOfWeek(weekIndex, yearIndex).plusDays(eventDayIndex - 1);

                Date startTime = (Date) editJSStartTime.getValue();
                //Correct the startTime
                LocalDateTime startDateTime = startTime.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                int startHour = startDateTime.getHour();
                int startMinute = startDateTime.getMinute();
                int startSecond = startDateTime.getSecond();
                LocalDateTime newStartDateTime = LocalDateTime.of(day.getYear(), day.getMonthValue(), day.getDayOfMonth(), startHour, startMinute, startSecond);
                startTime = Date.from(newStartDateTime.atZone(ZoneId.systemDefault()).toInstant()); 
            

                Date endTime = (Date) editJSEndTime.getValue();
                 //Correct the endTime
                LocalDateTime endDateTime = endTime.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                int endHour = endDateTime.getHour();
                int endMinute = endDateTime.getMinute();
                int endSecond = endDateTime.getSecond();
                LocalDateTime newEndDateTime = LocalDateTime.of(day.getYear(), day.getMonthValue(), day.getDayOfMonth(), endHour, endMinute, endSecond);
                endTime = Date.from(newEndDateTime.atZone(ZoneId.systemDefault()).toInstant()); 

                //Check if notification is selected
                boolean hasNotification = editJRBNotificationOn.isSelected();

                 //Create new Event
                HTimetableDAOImpl timetableInfoDAO = new HTimetableDAOImpl();
                HTimetable newEvent = new HTimetable();
                HTimetableLinkerDAOImpl timetableLinkerInfoDAO = new HTimetableLinkerDAOImpl();
                HTimetableLinker newEventLinker = new HTimetableLinker();

                //Set values to new dayOfWeek
                HDayOfTheWeekDAOImpl dayOfTheWeekInfoDAO = new HDayOfTheWeekDAOImpl();
                HDayOfTheWeek newDayOfWeek = new HDayOfTheWeek();
                newDayOfWeek = dayOfTheWeekInfoDAO.findById(eventDayIndex);
            
                // Set value to new frequency type
                HFrequencyTypeDAOImpl frequencyTypeInfoDAO = new HFrequencyTypeDAOImpl();
                HFrequencyType newFrequencyType = new HFrequencyType();
                newFrequencyType = frequencyTypeInfoDAO.findById(eventFrequencyType);
                
                //Set values to new event
                newEvent.setEventName(eventName);
                newEvent.setEventCategory(eventCategory);
                newEvent.setDay(eventDayIndex);
                newEvent.setFrequencyTypeId(eventFrequencyType);
                newEvent.setFrequencyAmount(eventFrequencyAmountIndex);
                newEvent.setEventStart(startTime);
                newEvent.setEventEnd(endTime);
                newEvent.setHasNotification(hasNotification);
                newEvent.setColor(colorStr);
                newEvent.setDayoftheweek(newDayOfWeek); 
//                newEvent.setFrequencytype(newFrequencyType); // Ensure this setter properly maps the frequency type
//                if (newFrequencyType == null) {
//                    throw new IllegalArgumentException("FrequencyType cannot be null. Please ensure it is properly initialized.");
//                }
                timetableInfoDAO.save(newEvent); //Save to DB

                //Get the new event id
                int newEventId = newEvent.getTimetableId();

                //set user and folder id
                HFolderPerUserDAOImpl folderPerUserInfoDAO = new HFolderPerUserDAOImpl();
                HFolderPerUser newUserAndFolder = new HFolderPerUser(); 
                newUserAndFolder = folderPerUserInfoDAO.findById(activeUserAndFolderId);

                //Set values to new eventLinker
                newEventLinker.setEventId(newEventId);
                newEventLinker.setUserAndFolderId(activeUserAndFolderId);
                newEventLinker.setFolderperuser(newUserAndFolder);
                newEventLinker.setTimetable(newEvent);
                timetableLinkerInfoDAO.save(newEventLinker); //Save to DB
                
                //prompt about the event being saved
                HTimetable savedEvent = timetableInfoDAO.findById(newEventId);
                if (savedEvent != null && savedEvent.getTimetableId() == newEventId) {
                    JOptionPane.showMessageDialog(this, "Event has been added successfully");
                } else {
                    JOptionPane.showMessageDialog(this, "Event failed to save.");
                }
                

                //Reload data
                reloadTimetableData();
                
            }
        } catch (Exception ex) {
            logger.CreateLog("error", "Exception caught trying to add event", ex);
            JOptionPane.showMessageDialog(this, "Event failed to save." + "\n cause: " + ex);
        } 
        
    }

    private boolean eventValidCheck (){
        boolean isValid = true;
        if (!validCheck.checkTextField(editJTFName)){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Name is required");
        }

        //Check if category is selected
        if (editJCBCategory.getSelectedItem() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Category is required");
        }

        //Check if day is selected
        if (editJCBDay.getSelectedItem() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Day is required");
        }

        //check frequency
        editJCBRepeatEvent.getSelectedItem();
        if (editJCBRepeatEvent.getSelectedItem() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Frequency is required");
        }
        
        //check frequency amount
        if (editJCBRepeatAmount.getSelectedItem() == null && !editJCBRepeatEvent.getSelectedItem().toString().equals("Once")){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Frequency Amount is required");
        }

        //check start time
        if (editJSStartTime.getValue() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event Start Time is required");
        }

        //check end time
        if (editJSEndTime.getValue() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Event End Time is required");
        }

        // check that start time is before end time
        Date startTime = (Date) editJSStartTime.getValue();
        Date endTime = (Date) editJSEndTime.getValue();     
        if (startTime != null && endTime != null) {
            if (startTime.after(endTime)) {
                isValid = false;
                JOptionPane.showMessageDialog(this, "Start time must be before end time");
            } else if (startTime.equals(endTime)) {
                isValid = false;
                JOptionPane.showMessageDialog(this, "Start time and end time cannot be the same");
            }
        }

        // check that of of NotificationRadio is selected 
        if (NotificationRadio.getSelection() == null){
            isValid = false;
            JOptionPane.showMessageDialog(this, "Notification is required");
        }

        return isValid;
    }

       
    private void setupRepeatEventListener() {
        editJCBRepeatEvent.addActionListener(evt -> {
            // populate the frequency amount based on the eventFrequency
            String eventFrequency = editJCBRepeatEvent.getSelectedItem().toString();
            editJCBRepeatAmount.setEnabled(false);

            List<String> eventFrequencyAmount = new ArrayList<>();
            switch (eventFrequency) {
                case "Once":
                    editJCBRepeatAmount.setEnabled(false);
                    break;
                case "Daily":
                    editJCBRepeatAmount.setEnabled(true);
                    eventFrequencyAmount.add("1 : EveryDay");
                    eventFrequencyAmount.add("2 : EveryOtherDay");
                    eventFrequencyAmount.add("3 : EveryThirdDay");
                    break;
                case "Weekly":
                    editJCBRepeatAmount.setEnabled(true);
                    eventFrequencyAmount.add("1 : EveryWeek");
                    eventFrequencyAmount.add("2 : EveryOtherWeek");
                    eventFrequencyAmount.add("3 : EveryThirdWeek");
                    break;
                case "Monthly":
                    editJCBRepeatAmount.setEnabled(true);
                    eventFrequencyAmount.add("1 : EveryMonth");
                    eventFrequencyAmount.add("2 : EveryOtherMonth");
                    eventFrequencyAmount.add("3 : EveryThirdMonth");
                    eventFrequencyAmount.add("4 : EveryFourthMonth");
                    break;
                default:
                    eventFrequencyAmount.add("NotSet");
                    break;
            }
            // Populate the frequency amount combo box
            editJCBRepeatAmount.removeAllItems();
            for (String frequency : eventFrequencyAmount) {
                editJCBRepeatAmount.addItem(frequency);
            }
        });
    }
    
    private void setupColorPickerListener(){
        // Add action listener to the color picker button where once a color is selected, it will set the color to the text field
        EventColorSelector.getSelectionModel().addChangeListener(e -> {
            Color selectedColor = EventColorSelector.getColor();
            editTBColor.setBackground(selectedColor);
            String colorStr = String.format("RGB(%d, %d, %d)", selectedColor.getRed(), selectedColor.getGreen(), selectedColor.getBlue());
            editTBColorStr.setText(colorStr);
        });
    
    }

    // create a method to get the location of a any component releative to the screen
    public Point getLocationRelativeToScreen(Component component) {
        Point location = component.getLocationOnScreen();
        return location;
    }


    public void reloadTimetableData(){

        populateTimetableData(activeUserAndFolderId, activeWeekIndex);
        if (!eventWeekList.isEmpty()){
            updateTimeTableForWeek(eventWeekList, activeWeekIndex);
            addEventToTable();
        }else{
            logger.CreateLog("error", "eventWeekList is empty", null);
        }
    }
    
    private void AddNewFolder(){
        //Create and show Add New Folder frame
        HFolderPerUserDAOImpl folderPerUserInfoDAO = new HFolderPerUserDAOImpl();
        HFolderPerUser newUserAndFolder = new HFolderPerUser();
        HFolderDAOImpl folderInfoDAO = new HFolderDAOImpl();
        HFolder newFolder = new HFolder();
        HUsersDAOImpl usersDao = new HUsersDAOImpl();
        HUsers currentUser = usersDao.findById(activeUserId);

        //Create and show a prompt to get the folder name
        String folderName = JOptionPane.showInputDialog(this, "Enter Folder Name", "Add New Folder", JOptionPane.OK_CANCEL_OPTION);
        Point location = getLocationRelativeToScreen(jBFolderAdd);
        location.y -= jBFolderAdd.getHeight(); // adjust to above the button
        
        if (folderName == null || folderName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Folder name cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }else{
            //Create new folder
            newFolder.setFolderName(folderName);
            folderInfoDAO.save(newFolder); //Save to DB

            //Get the new folder id
            int newFolderId = newFolder.getFolderId();

            //set user and folder id
            newUserAndFolder.setUserId(activeUserId);
            newUserAndFolder.setFolderId(newFolderId);
            newUserAndFolder.setUsers(currentUser);
            newUserAndFolder.setFolder(newFolder);
            folderPerUserInfoDAO.save(newUserAndFolder); //Save to DB

            //check if the folder was saved
            HFolderPerUser savedUserAndFolder = folderPerUserInfoDAO.findById(newUserAndFolder.getFolderPerUserId());
            if (savedUserAndFolder != null && savedUserAndFolder.getFolderPerUserId() == newUserAndFolder.getFolderPerUserId()) {
                JOptionPane.showMessageDialog(this, "Folder has been added successfully");
            } else {
                JOptionPane.showMessageDialog(this, "Folder failed to save.");
            }

            //Reload data
        
            UpdateFolderList();
        }

    
    }

    private void RemoveFolder(){
        HFolderDAOImpl folderInfoDAO = new HFolderDAOImpl();
        HFolder folder = folderInfoDAO.findById(activeFolderId);
        String folderName = folder.getFolderName();

        if(folder != null && folder.getFolderId() != 1){
            int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete FolderName : " + folderName + " ?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION) {
                folderInfoDAO.delete(folder);
                JOptionPane.showMessageDialog(this, "The Folder \" " + folderName + " \" has been deleted successfully");
            } else {
                JOptionPane.showMessageDialog(this, "Folder deletion cancelled");
            }
        }else {
            JOptionPane.showMessageDialog(this, "You cannot delete the default folder");
        }

        //Reload the folderList
        setActiveFolderId(1);
        setActiveUserAndFolderId(1);
        UpdateFolderList();
        reloadTimetableData();
    }
    
    private void CancelNewEvent(){
        //Reset all fields
        editJTFName.setText("");
        editJCBCategory.setSelectedIndex(0);
        editJCBDay.setSelectedIndex(0);
        editJCBRepeatEvent.setSelectedIndex(0);
        if(editJCBRepeatAmount.isEnabled()){
            editJCBRepeatAmount.setSelectedIndex(0);
        }
        editJCBRepeatAmount.setEnabled(false);
        editJSStartTime.setValue(new Date());
        editJSEndTime.setValue(new Date());
        editTBColorStr.setText("");
        editTBColor.setBackground(Color.WHITE);
        editJRBNotificationOff.setSelected(true);
    
    }

    private void addEventToTable() {

        if (jTimetable != null) {

            // check if event is already added then remove it before adding it again
            jTimetable.removeMouseListener(jTimetable.getMouseListeners()[0]); // Remove existing mouse listener
            
            // add mouse listener to launch base on cell selection
            jTimetable.addMouseListener(new java.awt.event.MouseAdapter() {
            private volatile boolean isEditorOpen = false; // Flag to track if the editor is already open

            @Override
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (isEditorOpen) {
                    return; // Prevent opening multiple editors
                }

                int row = jTimetable.rowAtPoint(e.getPoint());
                int column = jTimetable.columnAtPoint(e.getPoint());

                if (row >= 0 && column >= 0) { // Ensure valid cell
                    Object cellValue = jTimetable.getValueAt(row, column);

                    // Check if the cell contains an event ID (integer)
                    if (cellValue instanceof Integer) {
                        int eventId = (Integer) cellValue;

                        SwingUtilities.invokeLater(() -> {
                            // Open the event editor with the specific event ID
                            JEventEditor eventEditor = new JEventEditor(eventId, activeUserAndFolderId, JTimetableMain.this);
                            eventEditor.setLocationRelativeTo(jTimetable);
                            eventEditor.setVisible(true);

                            // Add a listener to reset the flag when the editor is closed
                            eventEditor.addWindowListener(new java.awt.event.WindowAdapter() {
                                @Override
                                public void windowClosed(java.awt.event.WindowEvent e) {
                                    isEditorOpen = false;
                                }
                            });

                            isEditorOpen = true; // Set the flag to true
                        });
                    }
                }
            }
        });
        } else {
            logger.CreateLog("error", "jTimetable is null", null);

        }  
    }
    
     
    //Getters/Setters >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   

    public int getActiveUserAndFolderId() {
        return activeUserAndFolderId;
    }

    public void setActiveUserAndFolderId(int activeUserAndFolderId) {
        this.activeUserAndFolderId = activeUserAndFolderId;
    }

    public int getActiveFolderId() {
        return activeFolderId;
    }

    public void setActiveFolderId(int activeFolderId) {
        this.activeFolderId = activeFolderId;
    }

    public int getActiveUserId() {
        return activeUserId;
    }

    public void setActiveUserId(int activeUserId) {
        this.activeUserId = activeUserId;
    }
    
    
    
    //Methods >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   

    private void ChooseInitailValue(int userId, String userName){
        //Initialize Variables
        userInfoDAO = new HUsersDAOImpl();
        userInfo = new HUsers();
        timetableInfoDAO = new HTimetableDAOImpl();
        timetableInfo = new HTimetable();
        timetableLinkerList = new ArrayList<>();
        timetableLinkerInfoDAO = new HTimetableLinkerDAOImpl();
        eventWeekList = new ArrayList<>();
        
        //Assign default values
        this.activeUserId = userId;
        this.userName = userName;
        jUserName.setText(userName);
        this.activeFolderId = 1;
        this.activeUserAndFolderId = 1;
        //this.activeTimetableLinkerId = 1;
        
        //start objects
        initializeEditorComp();
        
    }
    
    
    private void backToMain(){
    //Switch to the Guest UserAccount
     this.setVisible(false); //hide current Frame
           
     //create and show second frame
     JTimetableLoginPage login = new JTimetableLoginPage();
     login.setVisible(true);
    }//End signSuccess
    
    private void OpenOptions(){
        //Create and show Option frame
        JTimetableOptions options = new JTimetableOptions();
        options.setVisible(true);
    
    }//End OpenOptions
    
    private void OpenImportExportTool(){
        //Create and show Import/Export Tool frame
        JTimetableImportExportTool tool = new JTimetableImportExportTool();
        tool.setVisible(true);
    
    }//End OpenImportExportTool
    
    private void UpdateFolderList(){
    
        //Get list of folder for specific user
        HUsersDAOImpl usersDao = new HUsersDAOImpl();  
        
        int maxUserCount = 20;
                
        HUsers currentUser = usersDao.findById(activeUserId);
        List<HFolderPerUser> userFolderList = currentUser.getFolderPerUserList();
        
        if (userFolderList != null){
            int rowCount = userFolderList.size();
            //JPanel userFolderListUI = new JPanel();
            //userFolderListUI.setLayout(new BoxLayout(userFolderListUI, BoxLayout.Y_AXIS)); 
            
            JPanel UI = new JPanel();    
            if(rowCount > maxUserCount ){
                UI.setLayout(new GridLayout(rowCount, 5, 10, 5));
            }else{
                UI.setLayout(new GridLayout(maxUserCount, 5, 10, 5));
            }
            
            
            //SetButton Group for single click
            ButtonGroup userFolderListGroup = new ButtonGroup();
            
            //ilterate between folders then create and add a button with its events
            for (HFolderPerUser userFolder1 : userFolderList){
                int folderId = userFolder1.getFolderId();
                int userFolderId =  userFolder1.getFolderPerUserId();
                String folderName = userFolder1.getFolder().getFolderName();
                
                //Create button to Switch tables
                    
                JButton button = new JButton(folderName);
                button.setPreferredSize(new Dimension(30, 25));
                
                
                //add event to button
                button.addActionListener((ActionEvent e) -> {
                    //UpdateEventList(folderId, userFolderId);
                    ChooseFolder(folderId, userFolderId);
                });
                
                //Add button to ButtonGroup
                userFolderListGroup.add(button);
                
                //Add button to UI
                //userFolderListUI.add(Box.createRigidArea(new Dimension(5, 5)));
                //userFolderListUI.add(button);
                //userFolderListUI.add(Box.createRigidArea(new Dimension(5, 5)));

                UI.add(button);
                // Add button to Box container
                //buttonBox.add(button);
                //buttonBox.add(Box.createVerticalStrut(5)); // Add spacing between buttons
            }
            //UI.add(userFolderListUI);
             // Add Box container to panel
            //userFolderListUI.add(buttonBox, gbc);
            
            // add panel to scrollablepanel
            jScrollPaneFolder.setViewportView(UI);
        }

    }//End UpdateFolderList
    
    
    private void initialCreateTable() {
        String[] header = {"TimeFrame", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

        tableModel = new DefaultTableModel(header, 0);

        Object[][] data = {
            {"12:00am - 1:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"1:00am - 2:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"2:00am - 3:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"3:00am - 4:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"4:00am - 5:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"5:00am - 6:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"6:00am - 7:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"7:00am - 8:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"8:00am - 9:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"9:00am - 10:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"10:00am - 11:00am", "_", "_", "_", "_", "_", "_", "_"},
            {"11:00am - 12:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"12:00pm - 1:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"1:00pm - 2:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"2:00pm - 3:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"3:00pm - 4:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"4:00pm - 5:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"5:00pm - 6:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"6:00pm - 7:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"7:00pm - 8:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"8:00pm - 9:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"9:00pm - 10:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"10:00pm - 11:00pm", "_", "_", "_", "_", "_", "_", "_"},
            {"11:00pm - 12:00pm", "_", "_", "_", "_", "_", "_", "_"}
        };

        for (Object[] row : data) {
            tableModel.addRow(row);
        }

        // Update table with data
        jTimetable = new JTable(tableModel);

        JScrollPane jScrollPaneTimetable1 = new JScrollPane(jTimetable);

        jPTimetableRoot.setLayout(new BorderLayout());
        jPTimetableRoot.add(jScrollPaneTimetable1, BorderLayout.CENTER);

        jPTimetableRoot.revalidate();
        jPTimetableRoot.repaint();

        setRowHeightAndColumnWidth(jTimetable);
        removeCellLines(jTimetable);

        // Adjust table property
        jTimetable.setCellSelectionEnabled(true);
        jTimetable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jTimetable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                                                           boolean isSelected, boolean hasFocus, int row, int column) {

                Component cellComponent = super.getTableCellRendererComponent(table, value,
                        isSelected, hasFocus, row, column);

                if (isSelected) {
                    cellComponent.setBackground(table.getSelectionBackground());
                    cellComponent.setForeground(table.getSelectionForeground());
                } else {
                    cellComponent.setBackground(new Color(0, 0, 0, 0));
                    cellComponent.setForeground(table.getForeground());
                }
                return cellComponent;
            }
        });

        // Set the default week index to the current day
        setCurrentWeekRange();

        // Populate timetable data for the current week index
        populateTimetableData(activeUserAndFolderId, activeWeekIndex);
        
        
    }

    private boolean isCellInRange(int row, int column, int startRow, int endRow,
    int startColumn, int endColumn){
        return row >= startRow && row <= endRow && column >= startColumn && column <= endColumn;
    }
    
    
    private int getColumnIndex(String day){
        switch (day.toLowerCase()) {
            case "sunday" : return 1;
            case "monday" : return 2;
            case "tuesday" : return 3;
            case "wednesday" : return 4;
            case "thursday" : return 5;
            case "friday" : return 6;
            case "saturday" : return 7;
            default : return -1;
        }
    }// Method : getColumnIndex
    
    private int getTimeframeIndex(String timeframe){
        switch (timeframe.toLowerCase()) {
            case "12:00am - 1:00am" : return 0;
            case "1:00am - 2:00am" : return 1;
            case "2:00am - 3:00am" : return 2;
            case "3:00am - 4:00am" : return 3;
            case "4:00am - 5:00am" : return 4;
            case "5:00am - 6:00am" : return 5;
            case "6:00am - 7:00am" : return 6;
            case "7:00am - 8:00am" : return 7;
            case "8:00am - 9:00am" : return 8;
            case "9:00am - 10:00am" : return 9;
            case "10:00am - 11:00am" : return 10;
            case "11:00am - 12:00pm" : return 11;
            case "12:00pm - 1:00pm" : return 12;
            case "1:00pm - 2:00pm" : return 13;
            case "2:00pm - 3:00pm" : return 14;
            case "3:00pm - 4:00pm" : return 15;
            case "4:00pm - 5:00pm" : return 16;
            case "5:00pm - 6:00pm" : return 17;
            case "6:00pm - 7:00pm" : return 18;
            case "7:00pm - 8:00pm" : return 19;
            case "8:00pm - 9:00pm" : return 20;
            case "9:00pm - 10:00pm" : return 21;
            case "10:00pm - 11:00pm" : return 22;
            case "11:00pm - 12:00pm" : return 23;

            default : return -1;
        }
    }// Method : getTimeframeIndex
        
    private String getTimeframeString(int hour){
        switch (hour) {
            case 0 : return "12:00am - 1:00am";
            case 1 : return "1:00am - 2:00am";
            case 2 : return "2:00am - 3:00am";
            case 3 : return "3:00am - 4:00am";
            case 4 : return "4:00am - 5:00am";
            case 5 : return "5:00am - 6:00am";
            case 6 : return "6:00am - 7:00am";
            case 7 : return "7:00am - 8:00am";
            case 8 : return "8:00am - 9:00am";
            case 9 : return "9:00am - 10:00am";
            case 10 : return "10:00am - 11:00am";
            case 11 : return "11:00am - 12:00pm";
            case 12 : return "12:00pm - 1:00pm";
            case 13 : return "1:00pm - 2:00pm";
            case 14 : return "2:00pm - 3:00pm";
            case 15 : return "3:00pm - 4:00pm";
            case 16 : return "4:00pm - 5:00pm";
            case 17 : return "5:00pm - 6:00pm";
            case 18 : return "6:00pm - 7:00pm";
            case 19 : return "7:00pm - 8:00pm";
            case 20 : return "8:00pm - 9:00pm";
            case 21 : return "9:00pm - 10:00pm";
            case 22 : return "10:00pm - 11:00pm";
            case 23 : return "11:00pm - 12:00pm";

            default : return "invalid";
        }

    }// Method : getTimeframeString
    
    private Timeframe getTimeframe(String startDay, String endDay, LocalDateTime start,
    LocalDateTime end) {
        
        int startDayIndex = getColumnIndex(startDay);
        int endDayIndex = getColumnIndex(endDay);
        
        int hours = 0;
        int minutes = 0;
        int seconds = 0;
        
        try {
            if (startDayIndex == endDayIndex) {
                if (start.isBefore(end)) {
                    LocalDateTime timeSpan = end.minusHours(start.getHour())
                            .minusMinutes(start.getMinute()).minusSeconds(start.getSecond());
                    hours = timeSpan.getHour();
                    minutes = timeSpan.getMinute();
                    seconds = timeSpan.getSecond();
                }
            } else if (startDayIndex < endDayIndex) {
                int days = endDayIndex - startDayIndex;
                int addedHours = days * 24;
                hours = (addedHours + end.getHour()) - start.getHour();
                minutes = end.getMinute() - start.getMinute();
                seconds = end.getSecond() - start.getSecond();
            } else if (startDayIndex > endDayIndex) {
                // Handle cases where the event spans across weeks
                int days = (7 - startDayIndex) + endDayIndex; // Remaining days in the week + days in the next week
                int addedHours = days * 24;
                hours = (addedHours + end.getHour()) - start.getHour();
                minutes = end.getMinute() - start.getMinute();
                seconds = end.getSecond() - start.getSecond();
            }

            // Adjust hours, minutes, and seconds to ensure they are within valid ranges
            if (seconds < 0) {
                seconds += 60;
                minutes -= 1;
            } else if (seconds >= 60) {
                seconds -= 60;
                minutes += 1;
            }

            if (minutes < 0) {
                minutes += 60;
                hours -= 1;
            } else if (minutes >= 60) {
                minutes -= 60;
                hours += 1;
            }

        } catch (Exception e) {
            logger.CreateLog("error", "Exception caught when doing calculation.", e);
        }

        return new Timeframe(hours, minutes, seconds);

    } // Method : getTimeframe

    private Timeframe getTimeframePerDay(LocalDateTime start,
    LocalDateTime end) {
        
        
        int hours = 0;
        int minutes = 0;
        int seconds = 0;
        
        try {
            if (start.isBefore(end)) {
                    LocalDateTime timeSpan = end.minusHours(start.getHour())
                            .minusMinutes(start.getMinute()).minusSeconds(start.getSecond());
                    hours = timeSpan.getHour();
                    minutes = timeSpan.getMinute();
                    seconds = timeSpan.getSecond();
            } 
            
            // Adjust hours, minutes, and seconds to ensure they are within valid ranges
            if (seconds < 0) {
                seconds += 60;
                minutes -= 1;
            } else if (seconds >= 60) {
                seconds -= 60;
                minutes += 1;
            }

            if (minutes < 0) {
                minutes += 60;
                hours -= 1;
            } else if (minutes >= 60) {
                minutes -= 60;
                hours += 1;
            }

        } catch (Exception e) {
            logger.CreateLog("error", "Exception caught when doing calculation.", e);
        }

        return new Timeframe(hours, minutes, seconds);

    } // Method : getTimeframe

 
    //Internal Class to store timeframe
    public class Timeframe {
        private int hours;
        private int minutes;
        private int seconds;
        
        
        public Timeframe(int hours, int minutes, int seconds){
            this.hours = hours;
            this.minutes = minutes;
            this.seconds = seconds;
        }
        
        public int getHours() {
            return hours;
        }
        
        public int getMinutes() {
            return minutes;
        }
        
        public int getSeconds(){
            return seconds;
        }
    }
    
    //change cell color older
    private void changeCellColorByString(JTable table, String startDay, String endDay, String startTimeframe,
    String endTimeframe, Color color) {
        
        int startDayIndex = getColumnIndex(startDay);
        int endDayIndex = getColumnIndex(endDay);
        int startTimeIndex = getRowIndex(table, startTimeframe);
        int endTimeIndex = getRowIndex(table, endTimeframe);
        
        if (startDayIndex == -1 || endDayIndex == -1 || startTimeIndex == -1 || 
        endTimeIndex == -1) {
            return;// invalid values, exit method
        }
        
        
        for(int row = startTimeIndex; row <= endTimeIndex; row++) {
            for (int col = startDayIndex; col <= endDayIndex; col++){
                table.prepareRenderer(new DefaultTableCellRenderer(){
                    @Override
                    public Component getTableCellRendererComponent(JTable table, 
                    Object value, boolean isSelected, boolean hasFocus, int row,
                    int column) {
                        Component c = super.getTableCellRendererComponent(table, value,
                        isSelected, hasFocus, row, column);
                        
                        if (row >= startTimeIndex && row <= endTimeIndex && column >=
                        startDayIndex && column <= endDayIndex){
                            
                            if(color != null){
                                 c.setBackground(color);
                            }else{
                                 c.setBackground(Color.GREEN); //default color when none is set
                            }  
                        }
                        return c;
                    }
                }, row, col);
            }
        }
    }// Method : changeCellColorByString
    
    
    private void resetTable(JTable table){
        // iterate trhough all colouns and reset there cell renderers to default
        for (int column = 1; column < table.getColumnCount(); column++){
            table.getColumnModel().getColumn(column).setCellRenderer(new DefaultTableCellRenderer());
        }
            
        //Repaint the table to apply the changes
        table.repaint();

    }

   
    
    
    private void changeCellByRow(JTable table, List<EventDayRange> eventRangeList) {
        List<Integer> daysWithEntries = new ArrayList<>();

        for (EventDayRange range : eventRangeList) {
            if (!daysWithEntries.contains(range.getDayIndex())) {
                daysWithEntries.add(range.getDayIndex());
            }
        }

        // Iterate through each day and then each sameDayRange to apply the renderer to only those cells
        for (int dayIndex : daysWithEntries) {
            List<EventDayRange> sameDayRanges = new ArrayList<>();
            for (EventDayRange range : eventRangeList) {
                if (range.getDayIndex() == dayIndex) {
                    sameDayRanges.add(range);
                }
            }


            // create default renderer 
            DefaultTableCellRenderer initialRenderer = new DefaultTableCellRenderer(){
               @Override
                   public Component getTableCellRendererComponent(JTable table,
                   Object value, boolean isSelected, boolean hasFocus, int row, 
                   int column) { 
           
                       return super.getTableCellRendererComponent(table, value, isSelected,
                       hasFocus, row, column);
                   }
            };

            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                    Component initialC = initialRenderer.getTableCellRendererComponent(table,
                                           value, isSelected, hasFocus, row, column);

                    for (EventDayRange range : sameDayRanges) {
                        

                        if (row >= range.getStartRow() && row <= range.getEndRow() && column == range.getDayIndex()) {
                            c.setBackground(range.getColor() != null ? range.getColor() : Color.GREEN);
                            
                            if (row == range.getStartRow()) {
                                ((JLabel) c).setBorder(BorderFactory.createMatteBorder(1, 1, 0, 1, Color.BLACK));
                                ((JLabel) c).setText(range.getEventName());
                                ((JLabel) c).setHorizontalAlignment(SwingConstants.CENTER);
                                ((JLabel) c).setVerticalAlignment(SwingConstants.CENTER);
                                ((JLabel) c).setFont(new java.awt.Font("TImesNewRoman", java.awt.Font.BOLD, 12));
                                ((JLabel) c).setOpaque(true);
                                ((JLabel) c).setBackground(range.getColor());
                                ((JLabel) c).setForeground(getContrastingColor(range.getColor()));
                                //c.setForeground(getContrastingColor(range.getColor()));
                                
                                // Add event id directly to that cell
                                table.setValueAt(range.getEventId(), row, column);

                            } else if (row == range.getEndRow()) {
                                ((JLabel) c).setBorder(BorderFactory.createMatteBorder(0, 1, 1, 1, Color.BLACK));
                            } else {
                                ((JLabel) c).setBorder(BorderFactory.createMatteBorder(0, 1, 0, 1, Color.BLACK));
                            }
                            return c;
                        }
                    }

                    // Reset to default for cells not in the range
                    c.setBackground(Color.WHITE);
                    
                    ((JLabel) c).setBorder(null);
                    ((JLabel) c).setText(value != null ? value.toString() : "");
                     // create a list of rowIndex that is not within the range of the sameDayRanges
                    List<Integer> activeRowIndexList = new ArrayList<>();
                    // iterate through the sameDayRanges and add the rowIndex to the activeRowIndexList
                    for (EventDayRange range : sameDayRanges) {
                        for (int i = range.getStartRow(); i <= range.getEndRow(); i++) {
                            activeRowIndexList.add(i);
                        }
                    }
                    // create a inactive rowIndex list thats no in activeRowIndexList
                    List<Integer> inactiveRowIndexList = new ArrayList<>();
                    for (int i = 0; i < table.getRowCount(); i++) {
                        if (!activeRowIndexList.contains(i)) {
                            inactiveRowIndexList.add(i);
                        }
                    }

                    // if current row is in the inactiveRowIndexList then set the initialC
                    if (inactiveRowIndexList.contains(row)) {
                        return initialC;
                    }

                    return c;
                }
            };

            // Apply the renderer to the column for the day
            table.getColumnModel().getColumn(dayIndex).setCellRenderer(renderer);
        }

        // Repaint the table to apply the changes
        table.repaint();

        
    }// End changeCellColor
    
    
    private int getRowIndex(JTable table, String timeframe){
        for (int i = 0; i < table.getRowCount(); i++) {
            if(table.getValueAt(i, 0).equals(timeframe)){
                return i;
            }
        }
        return -1; // not found
    }
    
    
    // Remove lines between cells
    private void removeCellLines(JTable table){
        table.setShowGrid(false);
        table.setIntercellSpacing(new Dimension(0,0));
    }// Method : removeCellLines
    
    //Set row height and column width
    private void setRowHeightAndColumnWidth(JTable table){
        table.setRowHeight(40); // increase row height
        
        table.getColumnModel().getColumn(0).setPreferredWidth(130); // set width for the timeframe column
    
    }// Method : setRowHeightAndColumnWidth
    
    public class EventDayRange {
        private int startRow;
        private int endRow;
        private List<Integer> rowRange = new ArrayList<>(); 
        private int dayIndex;
        private int weekIndex;
        private int monthIndex;
        private int yearIndex;
        private int eventId;
        private String eventName;
        private Color color;
        
        public EventDayRange(int startRow, int endRow, int dayIndex, int weekIndex,
        int monthIndex, int yearIndex, int eventId, String eventName, Color color){
            this.startRow = startRow;
            this.endRow = endRow;
            this.dayIndex = dayIndex;
            this.weekIndex = weekIndex;
            this.monthIndex = monthIndex;
            this.yearIndex = yearIndex;
            this.eventId = eventId;
            this.eventName = eventName;
            this.color = color;
            
            rowRange = new ArrayList<>(); 
        }
        
        //Getters and setters
        public int getStartRow(){return startRow; }
        public int getEndRow() {return endRow; }
        public List<Integer> getRowRange() {return rowRange; }
        public int getDayIndex() {return dayIndex; }
        public int getWeekIndex() {return weekIndex; }
        public int getMonthIndex() {return monthIndex; }
        public int getYearIndex() {return yearIndex; }
        public int getEventId() {return eventId; }
        public String getEventName() {return eventName; }
        public Color getColor() {return color; }
        
        public void setRowRange( Integer newRowId){
            rowRange.add(newRowId);
        }

        public void setRowRange( List<Integer> newRowList){
            rowRange.addAll(newRowList);
        }
    
    }
  
    private void setListOfTableIndexEventIdFullRange(HTimetable event) {
        int eventId = event.getTimetableId();
        String eventName = event.getEventName();
        String eventCategory = event.getEventCategory();
        String eventColorStr = event.getColor();
        Color eventColor = convertStringToColor(eventColorStr);
        String startDay = convertDateToDayOfWeek(event.getEventStart());
        String endDay = convertDateToDayOfWeek(event.getEventEnd());
        int startDayIndex = getColumnIndex(startDay);
        int endDayIndex = getColumnIndex(endDay);
        int startWeekIndex = getWeekIndex(event.getEventStart());
        int endWeekIndex = getWeekIndex(event.getEventEnd());
        LocalDateTime startTime = convertDateToLocalDateTime(event.getEventStart());
        LocalDateTime endTime = convertDateToLocalDateTime(event.getEventEnd());
        int startTimeIndex = convertLocalDateTimeToHoursValue(startTime);
        int endTimeIndex = convertLocalDateTimeToHoursValue(endTime);
        String startTimeString = getTimeframeString(startTimeIndex);
        String endTimeString = getTimeframeString(endTimeIndex);
        int startYear = getYear(event.getEventStart());
        int endYear = getYear(event.getEventEnd());

        int eventFrequency = event.getFrequencyTypeId();
        boolean hasNotification = event.isHasNotification();

        Timeframe timeframe = getTimeframe(startDay, endDay, startTime, endTime);
        int maxRowPerDay = 23;
        int maxRowPerWeek = 168;
        int maxColPerDay = 7;
        int maxWeekForYear = getMaxWeekIndex(startYear);

        List<EventDayRange> eventRangeList = new ArrayList<>();

        if (startWeekIndex == endWeekIndex) {
            // Single week logic
            int currentDayIndex = startDayIndex;
            int remainingDays = (endDayIndex >= startDayIndex) 
                ? endDayIndex - startDayIndex + 1 
                : (maxColPerDay - startDayIndex + 1) + endDayIndex + 1;
            int currentWeek = startWeekIndex;
            while (remainingDays > 0) {
                int daysToProcess = Math.min(maxColPerDay - currentDayIndex + 1, remainingDays);
                int startRow = startTimeIndex;
                int remainingRows = timeframe.hours;

                for (int day = 0; day < daysToProcess; day++) {
                    if (currentDayIndex <= maxColPerDay) {
                        int endRow;

                        if (day == 0) {
                            // First day logic
                            endRow = maxRowPerDay; // End at the last index of 23
                            remainingRows -= (maxRowPerDay - startRow + 1); // Adjusted to include the current row
                        } else if (day == daysToProcess - 1 && remainingDays == daysToProcess) {
                            // Last day logic
                            endRow = startRow + remainingRows;
                            remainingRows = 0;
                        } else {
                            // Intermediate days logic
                            startRow = 0; // Start from index 0
                            endRow = maxRowPerDay; // End at the last index of 23
                            remainingRows -= (maxRowPerDay - startRow);
                        }
                        
                        List<Integer> rowRange = new ArrayList<>();

                        EventDayRange eventRange = new EventDayRange(startRow, endRow,
                            currentDayIndex, currentWeek, 1 ,startYear, eventId, eventName, eventColor);
                        
                        
                        eventRange.setRowRange(endRow);
                        
                        eventRangeList.add(eventRange);

                        startRow = 0; // Reset startRow for the next day
                    }
                    currentDayIndex++;
                }

                remainingDays -= daysToProcess;
                currentDayIndex = 1; // Reset to Sunday for the next week
            }
        } else {
            // Multiple weeks logic
            int currentStartTimeIndex = 0; // Declare and initialize currentStartTimeIndex
            int remainingRows = 0; // Declare remainingRows outside the loop
            for (int startWeek = startWeekIndex; startWeek <= endWeekIndex; startWeek++) {
                if (startWeek <= maxWeekForYear) {
                    int currentDayIndex = (startWeek == startWeekIndex) ? startDayIndex : 1;
                    int remainingDays = (startWeek == endWeekIndex) 
                        ? endDayIndex 
                        : maxColPerDay - currentDayIndex + 1;
                    int currentWeek = startWeek;
                    currentStartTimeIndex = (startWeek == startWeekIndex) ? startTimeIndex : 0;

                    while (remainingDays > 0) {
                        int daysToProcess = Math.min(maxColPerDay - currentDayIndex + 1, remainingDays);
                        int startRow = currentStartTimeIndex;
                        
                        // if (day == 0) {
                        //     remainingRows = Math.min(timeframe.hours, remainingDays * maxRowPerDay); // Adjust rows for the week
                        // }

                        for (int day = 0; day < daysToProcess; day++) {
                            if (day == 0 && startWeek == startWeekIndex && startWeekIndex == endWeekIndex ) {
                                //remainingRows = Math.min(timeframe.hours, remainingDays * maxRowPerDay); // Adjust rows for the week
                                 remainingRows = ((daysToProcess - 2) * (maxRowPerDay + 1)) + endTimeIndex + ( 24 - startTimeIndex );
                            } else if (day == 0 && startWeek == startWeekIndex && startWeekIndex != endWeekIndex) {
                                remainingRows = ((daysToProcess - 1) * (maxRowPerDay + 1)) + ( 24 - startTimeIndex );
                            } else if (day == 0 && startWeek == endWeekIndex && startWeekIndex != endWeekIndex ) {
                                remainingRows = ((daysToProcess - 1) * (maxRowPerDay + 1)) + endTimeIndex;
                            } else {
                              // no action
                            }

                            if (currentDayIndex <= maxColPerDay) {
                                int endRow;

                                if (day == 0 && startWeek == startWeekIndex) {
                                    // First day logic for the first week
                                    endRow = maxRowPerDay; // End at the last index of 23
                                    remainingRows -= ((maxRowPerDay + 1) - startRow);
                                } else if (day == daysToProcess - 1 && remainingDays == daysToProcess && startWeek == endWeekIndex) {
                                    // Last day logic for the last week
                                    endRow = startRow + remainingRows;
                                    remainingRows = 0;
                                } else {
                                    // Intermediate days logic
                                    startRow = 0; // Start from index 0
                                    endRow = maxRowPerDay; // End at the last index of 23
                                    remainingRows -= ((maxRowPerDay + 1) - startRow);
                                }

                                List<Integer> rowRange = new ArrayList<>();
                                
                                EventDayRange eventRange = new EventDayRange(startRow, endRow,
                                    currentDayIndex, currentWeek, 1 ,startYear, eventId, eventName, eventColor);

                                eventRange.setRowRange(endRow);
                                eventRangeList.add(eventRange);

                                startRow = 0; // Reset startRow for the next day
                            }
                            currentDayIndex++;
                        }

                        remainingDays -= daysToProcess;
                        currentDayIndex = 1; // Reset to Sunday for the next week
                        currentStartTimeIndex = 0; // Reset start time for subsequent weeks
                    }
                } else {
                    // Handle events that span across years
                    int nextYear = startYear + 1;
                    int maxWeekForNextYear = getMaxWeekIndex(nextYear);
                    for (int nextYearWeek = 1; nextYearWeek <= maxWeekForNextYear; nextYearWeek++) {
                        int currentDayIndex = 1; // Reset to Sunday
                        int remainingDays = endDayIndex; // Remaining days in the next year
                        int currentWeek = nextYearWeek;

                        while (remainingDays > 0) {
                            int daysToProcess = Math.min(maxColPerDay - currentDayIndex + 1, remainingDays);
                            int startRow = 0; // Start from the beginning of the day
                            if (startWeek == startWeekIndex) {
                                remainingRows = Math.min(timeframe.hours, remainingDays * maxRowPerDay); // Adjust rows for the week
                            }

                            for (int day = 0; day < daysToProcess; day++) {
                                if (currentDayIndex <= maxColPerDay) {
                                    int endRow;

                                    if (day == daysToProcess - 1 && remainingDays == daysToProcess) {
                                        // Last day logic
                                        endRow = startRow + remainingRows;
                                        remainingRows = 0;
                                    } else {
                                        // Intermediate days logic
                                        endRow = maxRowPerDay; // End at the last index of 23
                                        remainingRows -= ((maxRowPerDay + 1) - startRow);
                                    }
                                    
                                    List<Integer> rowRange = new ArrayList<>();

                                    EventDayRange eventRange = new EventDayRange(startRow, endRow,
                                        currentDayIndex, currentWeek, 1 ,nextYear, eventId, eventName, eventColor);

                                     eventRange.setRowRange(endRow);
                                    eventRangeList.add(eventRange);

                                    startRow = 0; // Reset startRow for the next day
                                }
                                currentDayIndex++;
                            }

                            remainingDays -= daysToProcess;
                            currentDayIndex = 1; // Reset to Sunday for the next week
                            currentStartTimeIndex = 0; // Reset start time for subsequent weeks
                        }
                    }
                }
            }
        }

        // add list to main list of event ranges
        eventWeekList.addAll(eventRangeList);
        // for (EventDayRange currentRange : eventRangeList) {
        //     eventWeekList.add(currentRange);
        // }    
    }// End setListOfTableIndexEventIdFullRange
    
    
    private void setListOfTableIndex(HTimetable event) {
        int eventId = event.getTimetableId();
        String eventName = event.getEventName();
        String eventCategory = event.getEventCategory();
        boolean hasNotification = event.isHasNotification();
        String eventColorStr = event.getColor();
        Color eventColor = convertStringToColor(eventColorStr);
        LocalDate day = convertLocalDateToLocalDate(event.getEventStart());
        String dayStr = convertDateToDayOfWeek(event.getEventStart());
        int dayOfMonth = event.getDay();

        int dayIndex =  getColumnIndex(dayStr); 
        int dayIndex1 = event.getDay();
        int frequencyType = event.getFrequencyTypeId();
        int frequencyAmount = event.getFrequencyAmount();
        int weekIndex = getWeekIndex(event.getEventStart());
        int monthIndex = day.getMonthValue();
        int year = day.getYear();
        LocalDateTime startTime = convertDateToLocalDateTime(event.getEventStart());
        LocalDateTime endTime = convertDateToLocalDateTime(event.getEventEnd());
        int startTimeIndex = convertLocalDateTimeToHoursValue(startTime);
        int endTimeIndex = convertLocalDateTimeToHoursValue(endTime);
        Timeframe timeframe = getTimeframePerDay(startTime, endTime);
        
         int maxRowPerDay = 23;
         int maxRowPerWeek = 168;
         int maxDayPerWeek = 7;
         int maxWeekForYear = getMaxWeekIndex(year);
         int maxMonth = 12;
         
         List<EventDayRange> eventRangeList = new ArrayList<>();
         EventDayRange eventRange = null;
         
         //Store the list of rows used from 23
         List<Integer> rowRange = new ArrayList<>();  
         for (Integer row = startTimeIndex; row <= endTimeIndex; row++  ){
             rowRange.add(row);
         }
         
        switch(frequencyType) {
            case 0 : 
            // Add Event once 
                
                eventRange = new EventDayRange(startTimeIndex, endTimeIndex,
                                    dayIndex, weekIndex, monthIndex, year, eventId, eventName, eventColor);
                
                for(Integer cell :  rowRange){
                    eventRange.setRowRange(cell);
                }
                
                eventRangeList.add(eventRange);
                                    
                break;
            case 1 :
            // Add Event Daily 
                int maxRepeats = 3; // 0 repeat once, 1 repeat everyday, 2 repeats every other day etc 
       
                //Prevents a infinite loop
                if(frequencyAmount == 0) {
                    frequencyAmount = 1;
                }
                
                //Monthly
                for (int month = monthIndex; month <= maxMonth; month++ ){
                    //Weekly
                    for (int week = weekIndex; week <= maxWeekForYear; week++ ) {
                         //Daily 
                         for(int currentDay = dayIndex; currentDay <= maxDayPerWeek; currentDay += frequencyAmount ){
                                eventRange = new EventDayRange(startTimeIndex, endTimeIndex,
                                    currentDay, week, month, year, eventId, eventName, eventColor);
                                
                                for(Integer cell :  rowRange){
                                    eventRange.setRowRange(cell);
                                }
                                
                                eventRangeList.add(eventRange);
                         }
                    }
                }
                break;
            case 2 :
            // Add Event Weekly 
                //Prevents a infinite loop
                if(frequencyAmount == 0) {
                    frequencyAmount = 1;
                }
                
                //Monthly
                for (int month = monthIndex; month <= maxMonth; month++ ){
                    //Weekly
                    for (int week = weekIndex; week <= maxWeekForYear; week += frequencyAmount ) {
               
                        eventRange = new EventDayRange(startTimeIndex, endTimeIndex,
                            dayIndex, week, month, year, eventId, eventName, eventColor);
                                
                        for(Integer cell :  rowRange){
                            eventRange.setRowRange(cell);
                        }
                        
                        eventRangeList.add(eventRange);
                    }
                }
                
                
                break;
            case 3 :
                // Add Event Monthly 
                
                //Prevents a infinite loop
                if(frequencyAmount == 0) {
                    frequencyAmount = 1;
                }

                //Monthly
                for (int month = monthIndex; month <= maxMonth; month += frequencyAmount ){
     
                        eventRange = new EventDayRange(startTimeIndex, endTimeIndex,
                            dayIndex, weekIndex, month, year, eventId, eventName, eventColor);
                                
                        for(Integer cell :  rowRange){
                            eventRange.setRowRange(cell);
                        }
                        
                        eventRangeList.add(eventRange);
                }
                break;
            default: 
              logger.CreateLog("error", "eventWeekList not populated due to invalid frequency entry. ", null);
        }

        // add list to main list of event ranges
        for (EventDayRange currentRange : eventRangeList) {
            eventWeekList.add(currentRange);
        }    
    }// End setListOfTableIndexEventId
    
    private void updateTimeTableForWeek(List<EventDayRange> eventRangeList, int weekIndex){
        
        List<EventDayRange> currentWeekList = new ArrayList<>();
        
        //Locate only ranges from the same week
        for(EventDayRange range : eventRangeList){
            if (range.weekIndex == weekIndex){
               currentWeekList.add(range);
            }
       }
        
       resetTable(jTimetable); //Reset the table
       //changeCell(jTimetable, currentWeekList); // Apply renderer using a list of objects
       changeCellByRow(jTimetable, currentWeekList); // Apply renderer using a list of objects
    }
    
    
    
    
    public String convertDateToDayOfWeek(Date date){
        try {
            //Convert Date to LocalDate
            LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        
            // Get the day of the week as a string
            return localDate.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.ENGLISH);
        } catch (Exception e){
            logger.CreateLog("error", "Error converting date", e);
            return "NotSet";
            
        }
    }
    
    public LocalDateTime convertDateToLocalDateTime(Date date){
       // Convert Date to LocalDateTime 
       LocalDateTime localDateTime = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
       
       return localDateTime;
    }
    
    public LocalDate convertLocalDateToLocalDate(Date date){
       // Convert Date to LocalDate
       LocalDateTime dateTime = convertDateToLocalDateTime(date);
       LocalDate localDate = dateTime.toLocalDate();
       
       return localDate;
    }

    public Date convertLocalDateToDate(LocalDate date){
        //Convert LocalDate to Date
        ZonedDateTime zonedDateTime = date.atStartOfDay(ZoneId.systemDefault());
        return Date.from(zonedDateTime.toInstant());
    }
    
    public Date convertLocalDateTimeToDate(LocalDateTime dateTime){
        //Convert LocalDateTime to Date
        ZonedDateTime zonedDateTime = dateTime.atZone(ZoneId.systemDefault());
        return Date.from(zonedDateTime.toInstant());
    }

    public LocalTime convertDateToLocalTime(Date date){
        //Covert Date to LocalDateTime
        LocalDateTime dateTime = convertDateToLocalDateTime(date);
    
        //Extract LocalTime from localDateTime
        LocalTime localTime = dateTime.toLocalTime();
        
        return localTime;
    }

    public int convertLocalTimeToHoursValue(LocalTime time){
        //get  the hour from localTime
        return time.getHour();
    }
    
    public int convertLocalDateTimeToHoursValue(LocalDateTime time){
        //get  the hour from localTime
        return time.getHour();
    }
    
    public int getWeekIndex(Date date) {
        //Convert Date to localDate
        LocalDate localDate = convertLocalDateToLocalDate(date);

        // Get the week index number
        WeekFields weekFields = WeekFields.of(Locale.getDefault());
        return localDate.get(weekFields.weekOfWeekBasedYear());
    }
    
    public int getWeekIndex(LocalDate date) {
        //Convert LocalDate to week index number
        java.time.temporal.TemporalField weekOfYear = WeekFields.of(Locale.getDefault()).weekOfYear();
        int weekIndex = date.get(weekOfYear);
                
        return weekIndex;
    }
    
    public int getYear(Date date) {
        // Convert Date to local Date
        LocalDate localDate = convertLocalDateToLocalDate(date);
       
        //get the year
        return localDate.getYear();
    }
    
    public int getMaxWeekIndex(int year){
        // Get the last date of the year
        LocalDate lastDayOfYear = LocalDate.of(year, 12, 31);
        
        //Get the week Index number
        WeekFields weekFields = WeekFields.of(Locale.getDefault());
        return lastDayOfYear.get(weekFields.weekOfYear());
        
    }
    
    public Color convertStringToColor(String colorStr){
        try {
            // Check if the string matches the java.awt.Color format
            if (colorStr.startsWith("java.awt.Color[")) {
                // Extract the RGB values from the string
                String[] rgbValues = colorStr.substring(colorStr.indexOf("[") + 1, colorStr.indexOf("]")).split(",");
                int red = Integer.parseInt(rgbValues[0].split("=")[1].trim());
                int green = Integer.parseInt(rgbValues[1].split("=")[1].trim());
                int blue = Integer.parseInt(rgbValues[2].split("=")[1].trim());
                return new Color(red, green, blue);
            }
    
            // Handle named colors (e.g., "red", "blue")
            Field field = Color.class.getField(colorStr.toLowerCase());
            return (Color) field.get(null);
        } catch (Exception e) {
            logger.CreateLog("error", "Error trying to convert String to Color. ", e);
            return Color.white; // Default to white if parsing fails
        }
    
    }
    
    public Color getContrastingColor(Color color){
        
        try {
           //Invert the color
            int red = 255 - color.getRed();
            int green = 255 - color.getGreen();
            int blue = 255 - color.getBlue();
            return new Color(red, green, blue);
            
        } catch (Exception e) {
            logger.CreateLog("error", "Error trying to get contrasting color. ", e);
           return Color.WHITE;
        }
    }
    
     
    public LocalDate getFirstDayOfWeek(int weekIndex, int year){
        java.time.temporal.TemporalField weekOfYear = WeekFields.of(Locale.getDefault()).weekOfYear();
        LocalDate firstDayOfYear = LocalDate.of(year,1, 1);
        LocalDate firstDayOfWeek = firstDayOfYear.with(weekOfYear, weekIndex).with(WeekFields.of(Locale.getDefault()).dayOfWeek(), 1);
    
        return firstDayOfWeek;
    }
    
    public LocalDate getLastDayOfWeek(int weekIndex, int year){
        java.time.temporal.TemporalField weekOfYear = WeekFields.of(Locale.getDefault()).weekOfYear();
        LocalDate firstDayOfYear = LocalDate.of(year, 1, 1);
        LocalDate lastDayOfWeek = firstDayOfYear.with(weekOfYear, weekIndex).with(WeekFields.of(Locale.getDefault()).dayOfWeek(), 7);
        
        return lastDayOfWeek;
    }
    
    
}//End Class
