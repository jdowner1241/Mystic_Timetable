/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mystictodo_limited.mystic_timetable.UI;

import java.awt.Color;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import mystictodo_limited.mystic_timetable.db.DbConnectionManager;
import mystictodo_limited.mystic_timetable.util.APIClient;
import mystictodo_limited.mystic_timetable.util.APIServer;

/**
 *
 * @author Jamario_Downer
 */
public class JTimetableImportExportTool extends javax.swing.JFrame {

    /**
     * Creates new form JTimetableImportExportTool
     */
    //Constructor >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  
    public JTimetableImportExportTool() {
        initComponents();
        
        showNetworkInfo();
        
        jRBServerStatus.setSelected(false);
        jRBServerStatus.setForeground(Color.black);
        jTBToggleServer.setText("Start Server");
        jRBClientStatus.setSelected(false);
        jRBClientStatus.setForeground(Color.black);
        jTBToggleClient.setText("Start Client");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileImport = new javax.swing.JFileChooser();
        jFileExport = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPFileGroup = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLFileGroup = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jPNetworkGroup = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLServerPort = new javax.swing.JLabel();
        jBServerPortSetDefault = new javax.swing.JButton();
        jTBToggleServer = new javax.swing.JToggleButton();
        jLServerIP = new javax.swing.JLabel();
        jLServerHeader = new javax.swing.JLabel();
        jTFServerPort = new javax.swing.JTextField();
        jBServerPortSet = new javax.swing.JButton();
        jBServerIPSet = new javax.swing.JButton();
        jTFServerIP = new javax.swing.JTextField();
        jRBServerStatus = new javax.swing.JRadioButton();
        jBServerIPSetDefault = new javax.swing.JButton();
        jLNetworkGroup = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLClientPort = new javax.swing.JLabel();
        jBClientPortSetDefault = new javax.swing.JButton();
        jTBToggleClient = new javax.swing.JToggleButton();
        jLClientName = new javax.swing.JLabel();
        jLClientHeader = new javax.swing.JLabel();
        jTFClientPort = new javax.swing.JTextField();
        jBClientPortSet = new javax.swing.JButton();
        jBClientIPSet = new javax.swing.JButton();
        jTFClientName = new javax.swing.JTextField();
        jRBClientStatus = new javax.swing.JRadioButton();
        jBClientIPSetDefault = new javax.swing.JButton();
        jLClientIP = new javax.swing.JLabel();
        jTFClientIP = new javax.swing.JTextField();
        jBClientIPSet1 = new javax.swing.JButton();
        jBClientIPSetDefault1 = new javax.swing.JButton();

        jFileExport.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLFileGroup.setText("File Import/Export");

        jLabel4.setText("Import Timetable");

        jButton1.setText("Import");

        jRadioButton1.setText("Status");

        jLabel6.setText("Export Timetable");

        jButton2.setText("Export");

        jRadioButton2.setText("Status");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jLFileGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLFileGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jButton1)
                    .addComponent(jRadioButton1))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(jButton2)
                    .addComponent(jRadioButton2))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPFileGroupLayout = new javax.swing.GroupLayout(jPFileGroup);
        jPFileGroup.setLayout(jPFileGroupLayout);
        jPFileGroupLayout.setHorizontalGroup(
            jPFileGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPFileGroupLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(84, Short.MAX_VALUE))
        );
        jPFileGroupLayout.setVerticalGroup(
            jPFileGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPFileGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(306, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("File Transfer", jPFileGroup);

        jLServerPort.setText("Port");

        jBServerPortSetDefault.setText("Set Default");

        jTBToggleServer.setText("Start Server");
        jTBToggleServer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTBToggleServerStateChanged(evt);
            }
        });
        jTBToggleServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBToggleServerActionPerformed(evt);
            }
        });

        jLServerIP.setText("Server IP");

        jLServerHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLServerHeader.setText("Server");

        jBServerPortSet.setText("Set");

        jBServerIPSet.setText("Set");

        jRBServerStatus.setText("Server Status");
        jRBServerStatus.setToolTipText("");
        jRBServerStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBServerStatusActionPerformed(evt);
            }
        });
        jRBServerStatus.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jRBServerStatusPropertyChange(evt);
            }
        });

        jBServerIPSetDefault.setText("Set Default");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jLServerHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jBServerIPSet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBServerIPSetDefault))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jBServerPortSet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBServerPortSetDefault))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jTBToggleServer))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jRBServerStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLServerHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLServerIP)
                    .addComponent(jTFServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBServerIPSet)
                    .addComponent(jBServerIPSetDefault))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLServerPort)
                    .addComponent(jTFServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBServerPortSet)
                    .addComponent(jBServerPortSetDefault))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRBServerStatus)
                    .addComponent(jTBToggleServer))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jLNetworkGroup.setText("Network Import/Export");

        jLClientPort.setText("Port");

        jBClientPortSetDefault.setText("Set Default");

        jTBToggleClient.setText("Start Client");
        jTBToggleClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBToggleClientActionPerformed(evt);
            }
        });

        jLClientName.setText("Client Name");

        jLClientHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLClientHeader.setText("Client");

        jBClientPortSet.setText("Set");

        jBClientIPSet.setText("Set");

        jRBClientStatus.setText("Client Status");
        jRBClientStatus.setToolTipText("");
        jRBClientStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBClientStatusActionPerformed(evt);
            }
        });

        jBClientIPSetDefault.setText("Set Default");

        jLClientIP.setText("Client IP");

        jBClientIPSet1.setText("Set");

        jBClientIPSetDefault1.setText("Set Default");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jLClientHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLClientIP, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFClientIP, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBClientIPSet1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBClientIPSetDefault1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLClientPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jTFClientPort, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBClientPortSet))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jTBToggleClient)
                                        .addGap(35, 35, 35)
                                        .addComponent(jRBClientStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBClientPortSetDefault))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLClientName, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFClientName, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBClientIPSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBClientIPSetDefault)))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLClientHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLClientName)
                    .addComponent(jTFClientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBClientIPSet)
                    .addComponent(jBClientIPSetDefault))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLClientIP)
                    .addComponent(jTFClientIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBClientIPSet1)
                    .addComponent(jBClientIPSetDefault1))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLClientPort)
                    .addComponent(jTFClientPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBClientPortSet)
                    .addComponent(jBClientPortSetDefault))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jTBToggleClient)
                    .addComponent(jRBClientStatus))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPNetworkGroupLayout = new javax.swing.GroupLayout(jPNetworkGroup);
        jPNetworkGroup.setLayout(jPNetworkGroupLayout);
        jPNetworkGroupLayout.setHorizontalGroup(
            jPNetworkGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPNetworkGroupLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPNetworkGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLNetworkGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        jPNetworkGroupLayout.setVerticalGroup(
            jPNetworkGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPNetworkGroupLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLNetworkGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Network Transfer", jPNetworkGroup);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRBServerStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBServerStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRBServerStatusActionPerformed

    private void jRBClientStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBClientStatusActionPerformed
    
        
    }//GEN-LAST:event_jRBClientStatusActionPerformed

    private void jTBToggleServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBToggleServerActionPerformed
      
        if(jTBToggleServer.isSelected()){
            StartServer();
           
        }else{
//            if(serverStarted){
//                StopServer();
//                serverStarted = false;
//            }
            
            StopServer();

        }
    }//GEN-LAST:event_jTBToggleServerActionPerformed

    private void jTBToggleClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBToggleClientActionPerformed

        
        if(jTBToggleClient.isSelected()){
            StartClient();
        }else{
            StopClient();
//            if(clientStarted){
//                
//                clientStarted = false;
//            }
            jTBToggleClient.setText("Start Client");
        }
    }//GEN-LAST:event_jTBToggleClientActionPerformed

    private void jRBServerStatusPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jRBServerStatusPropertyChange
//        if(serverStarted){
//            jRBServerStatus.setSelected(serverStarted);
//            jRBServerStatus.setForeground(Color.green);
//        }else{
//            jRBServerStatus.setSelected(serverStarted);
//        }
    }//GEN-LAST:event_jRBServerStatusPropertyChange

    private void jTBToggleServerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTBToggleServerStateChanged
       
    }//GEN-LAST:event_jTBToggleServerStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTimetableImportExportTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTimetableImportExportTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTimetableImportExportTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTimetableImportExportTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JTimetableImportExportTool().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBClientIPSet;
    private javax.swing.JButton jBClientIPSet1;
    private javax.swing.JButton jBClientIPSetDefault;
    private javax.swing.JButton jBClientIPSetDefault1;
    private javax.swing.JButton jBClientPortSet;
    private javax.swing.JButton jBClientPortSetDefault;
    private javax.swing.JButton jBServerIPSet;
    private javax.swing.JButton jBServerIPSetDefault;
    private javax.swing.JButton jBServerPortSet;
    private javax.swing.JButton jBServerPortSetDefault;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileExport;
    private javax.swing.JFileChooser jFileImport;
    private javax.swing.JLabel jLClientHeader;
    private javax.swing.JLabel jLClientIP;
    private javax.swing.JLabel jLClientName;
    private javax.swing.JLabel jLClientPort;
    private javax.swing.JLabel jLFileGroup;
    private javax.swing.JLabel jLNetworkGroup;
    private javax.swing.JLabel jLServerHeader;
    private javax.swing.JLabel jLServerIP;
    private javax.swing.JLabel jLServerPort;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPFileGroup;
    private javax.swing.JPanel jPNetworkGroup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRBClientStatus;
    private javax.swing.JRadioButton jRBServerStatus;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JToggleButton jTBToggleClient;
    private javax.swing.JToggleButton jTBToggleServer;
    private javax.swing.JTextField jTFClientIP;
    private javax.swing.JTextField jTFClientName;
    private javax.swing.JTextField jTFClientPort;
    private javax.swing.JTextField jTFServerIP;
    private javax.swing.JTextField jTFServerPort;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

//Fields >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  
    private APIServer server = new APIServer();
    private APIClient client = new APIClient();
    int serverPort;
    int clientPort;
    boolean serverStarted;
    boolean clientStarted;
    
//    private static InetAddress hostInfo;  //Host information
//    private int hostPort = 6366; //Declare and assign socket server port and which it listens
//    private static final int defaultHostPort = 6366;
//   
//    
    static DbConnectionManager logger = new DbConnectionManager(APIClient.class);   
//Getters/Setters >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  
    
//Methods >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      
    
    private void showNetworkInfo(){
        //int serverPort = server.getServerPort();
        InetAddress clientHost = null;
        String clientHostName = null;
        String clientHostIP = null;
        
        serverPort = server.getServerPort();
        try{
             clientHost = InetAddress.getLocalHost();
             clientHostName = clientHost.getHostName();
             clientHostIP = clientHost.getHostAddress();
             serverPort = server.getDefaultServerPort();
             clientPort = client.getDefaultClientPort();
             
        }catch (UnknownHostException e){
            logger.CreateLog("error", "Failed to get Local host info.", e);
               System.out.println("host info null");
        }
        
//        int hostPort = APIClient.getClientPort();
        
        if (clientHost != null){
            jTFClientName.setText(clientHostName);
            jTFClientIP.setText(clientHostIP);
        }else{
         System.out.println("No client host address set");
        }
        
        if (clientPort != 0){

            jTFClientPort.setText(Integer.toString(clientPort) );
        }else{
             System.out.println("No client port address set");
        }
                
        if (serverPort != 0){
            jTFServerPort.setText(Integer.toString(serverPort));
        }else{
            System.out.println("No server port available " );
        }

    }//Close show details
    
    private void StartServer(){
        server = new APIServer(serverPort);
        server.execute();
        serverStarted = server.isServerStarted();
                
        //Visual Changes 
         jRBServerStatus.setSelected(true);
         jRBServerStatus.setForeground(Color.green);
         jTBToggleServer.setText("Stop Server");
    }
        
    private void StopServer(){
        if(server != null){
            server.stopServer();
            server.cancel(true);
        }
        
        //Visal Chanages
        jTBToggleServer.setText("Start Server");
        jRBServerStatus.setSelected(false);
        jRBServerStatus.setForeground(Color.black);    
    }
    
    private void StartClient(){
        try{
            client = new APIClient(clientPort);
            client.execute();
            clientStarted = client.isClientStarted();
            
            //Change the visuals
            jRBClientStatus.setSelected(true);
            jRBClientStatus.setForeground(Color.green);
            jTBToggleClient.setText("Stop Client");
        }catch (UnknownHostException e){
            logger.CreateLog("error", "Error occured when trying to start server from GUI", e);
        }
       
    }
        
    private void StopClient(){
        if(client != null){
            client.stopClient();
            client.cancel(true);  
        }
        //Change the visuals
        jRBClientStatus.setSelected(false);
        jRBClientStatus.setForeground(Color.black);
        jTBToggleClient.setText("Start Client");   
    }

}//End Class
